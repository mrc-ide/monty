% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{monty_model_properties}
\alias{monty_model_properties}
\title{Describe model properties}
\usage{
monty_model_properties(
  has_gradient = NULL,
  has_direct_sample = NULL,
  is_stochastic = NULL,
  has_parameter_groups = NULL,
  has_observer = NULL,
  allow_multiple_parameters = FALSE
)
}
\arguments{
\item{has_gradient}{Logical, indicating if the model has a
\code{gradient} method.  Use \code{NULL} (the default) to detect this from
the model.}

\item{has_direct_sample}{Logical, indicating if the model has a
\code{direct_sample} method.  Use \code{NULL} (the default) to detect this
from the model.}

\item{is_stochastic}{Logical, indicating if the model is
stochastic.  Stochastic models must supply \code{set_rng_state} and
\code{get_rng_state} methods.}

\item{has_parameter_groups}{Logical, indicating that the model can
be decomposed into parameter groups which are independent of
each other.  This is indicated by using the \code{parameter_groups}
field within the \code{model} object passed to \link{monty_model}, and
by the presence of a \code{by_group} argument to \code{density} and (later
we may also support this in \code{gradient}).  Use \code{NULL} (the
default) to detect this from the model.}

\item{has_observer}{Logical, indicating if the model has an
"observation" function, which we will describe more fully soon.
An observer is a function \code{observe} which takes no arguments and
returns arbitrary data about the previously evaluated density.
Use \code{NULL} (the default) to detect this from the model.}

\item{allow_multiple_parameters}{Logical, indicating if the
density calculation can support being passed a matrix of
parameters (with each column corresponding to a different
parameter set) and return a vector of densities.  If \code{FALSE}, we
will support some different approaches to sort this out for you
if this feature is needed.  This cannot be detected from the
model, and the default is \code{FALSE} because it's not always
straightforward to implement.  However, where it is possible it
may be much more efficient (via vectorisation or
parallelisation) to do this yourself.}
}
\value{
A list of class \code{monty_model_properties} which should
not be modified.
}
\description{
Describe properties of a model.  Use of this function is optional,
but you can pass the return value of this as the \code{properties}
argument of monty_model to enforce that your model does actually
have these properties.
}
\examples{
# Default properties:
monty_model_properties()

# Set some properties:
monty_model_properties(has_gradient = TRUE, is_stochastic = FALSE)
}
