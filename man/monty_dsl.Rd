% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsl.R
\name{monty_dsl}
\alias{monty_dsl}
\title{Domain Specific Language for monty}
\usage{
monty_dsl(x, type = NULL, gradient = NULL, fixed = NULL)
}
\arguments{
\item{x}{The model as an expression.  This may be given as an
expression, as a string, or as a path to a filename.  Typically,
we'll do a reasonable job of working out what you've provided
but use the \code{type} argument to disambiguate or force a
particular interpretation.  The argument uses rlang's quosures
to allow you to work with expressions directly; see examples for
details.}

\item{type}{Force interpretation of the type of expression given
as \code{x}.  If given, valid options are \code{expression}, \code{text} or
\code{file}.}

\item{gradient}{Control gradient derivation.  If \code{NULL} (the
default) we try and generate a gradient function for your model
and warn if this is not possible.  If \code{FALSE}, then we do not
attempt to construct a gradient function, which prevents a
warning being generated if this is not possible.  If \code{TRUE},
then we will error if it is not possible to create a gradient
function.}

\item{fixed}{An optional list of values that can be used within
the DSL code.  Anything you provide here is available for your
calculations.  In the interest of future compatibility, we check
currently that all elements are scalars.  In future this may
become more flexible and allow passing environments, etc.  Once
provided, these values cannot be changed without rebuilding the
model; they are fixed data.  You might use these for
hyperparameters that are fixed across a set of model runs, for
example.}
}
\value{
A \link{monty_model} object derived from the expressions you
provide.
}
\description{
Create a model using the monty DSL; this function will likely
change name in future, as will its interface.
}
\examples{

# Expressions that define models can be passed in with no quoting
monty_dsl(a ~ Normal(0, 1))
monty_dsl({
  a ~ Normal(0, 1)
  b ~ Exponential(1)
})

# You can also pass strings
monty_dsl("a ~ Normal(0, 1)")
}
