% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-function.R
\name{monty_model_function}
\alias{monty_model_function}
\title{Create \code{monty_model} from a function computing density}
\usage{
monty_model_function(
  density,
  packer = NULL,
  fixed = NULL,
  domain = NULL,
  allow_multiple_parameters = FALSE
)
}
\arguments{
\item{density}{A function to compute log density.  It can take any
number of parameters}

\item{packer}{Optionally, a \link{monty_packer} object to control how
your function parameters are packed into a numeric vector.  You
can typically omit this if all the arguments to your functions
are present in your numeric vector and if they are all scalars.}

\item{fixed}{Optionally, a named list of fixed values to
substitute into the call to \code{density}.  This cannot be used in
conjunction with \code{packer} (you should use the \code{fixed} argument
to \code{monty_packer} instead).}

\item{domain}{Optional domain, see \link{monty_model}'s arguments for
details.  You can use "logical" names for array parameters and
these will be expanded as described in \code{\link[=monty_domain_expand]{monty_domain_expand()}}.}

\item{allow_multiple_parameters}{Logical, indicating if passing in
vectors for all parameters will return a vector of densities.
This is \code{FALSE} by default because we cannot determine this
automatically.  Be aware that R's recycling rules may mean that
this will not always work as expected!}
}
\value{
A \link{monty_model} object that computes log density with the
provided \code{density} function, given a numeric vector argument
representing all parameters.
}
\description{
Create a \link{monty_model} from a function that computes density.
This allows use of any R function as a simple monty model.  If you
need advanced model features, then this interface may not suit you
and you may prefer to use \link{monty_model} directly.
}
\details{
This interface will expand in future versions of monty to support
gradients, stochastic models, parameter groups and simultaneous
calculation of density.
}
\examples{
banana <- function(a, b, sd) {
  dnorm(b, log = TRUE) + dnorm((a - b^2) / sd, log = TRUE)
}
m <- monty_model_function(banana, fixed = list(sd = 0.25))
m

# Density from our new model. Note that this computes density
# using an unstructured parameter vector, which is mapped to 'a'
# and 'b':
monty_model_density(m, c(0, 0))

# Same as the built-in banana example:
monty_model_density(monty_example("banana"), c(0, 0))

# You can constrain parameters, for example:
fn <- function(a, b) {
  dbeta(a, 2, 5, log = TRUE) + dnorm(b, log = TRUE)
}

# Here 'a' must lie in [0, 1] so we pass this through as 'domain':
pr <- monty_model_function(fn, domain = rbind(a = c(0, 1)))

# Now, out-of-bounds values will be converted to -Inf:
monty_model_density(pr, c(0.5, 0.5)) # ok
monty_model_density(pr, c(0.5, 5)) # -Inf
}
