[{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e101","dir":"Articles","previous_headings":"","what":"E101","title":"DSL parse errors","text":"found expression neither assignment (<-) stochastic relationship (~) Example:","code":"a + 1"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e102","dir":"Articles","previous_headings":"","what":"E102","title":"DSL parse errors","text":"Invalid left hand side relationship operator (~). Currently left hand side must symbol, though relaxed future support array syntax. However, may use things like numbers function calls left hand side. Example:","code":"1 <- 2 f(x) <- g(y)"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e103","dir":"Articles","previous_headings":"","what":"E103","title":"DSL parse errors","text":"distribution call failed parse. can fail many reasons, details failure come monty::monty_dsl_parse_distribution Example reasons failure include rhs : call (e.g., compare(x) ~ 1 call distribution function (e.g., compare(x) ~ sqrt(2)) invalid call (e.g., compare(x) ~ Normal(0, 1, 2)) details failure included body error message.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e104","dir":"Articles","previous_headings":"","what":"E104","title":"DSL parse errors","text":"Invalid left hand side assignment <-; similar E102.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e201","dir":"Articles","previous_headings":"","what":"E201","title":"DSL parse errors","text":"Duplicated relationships (~). Example: Relationships must unique represents parameter, parameter can’t represented two different distributions.","code":"a ~ Normal(0, 1) b ~ Uniform(0, 1) a ~ Exponential(1) # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e202","dir":"Articles","previous_headings":"","what":"E202","title":"DSL parse errors","text":"Duplicated assignments (<-). similar E201 Example: Assignments must unique within DSL code makes straightforward trace usage dependency graph create gradient function using automatic differentiation. restriction means reassign value either, error:","code":"a <- 1 b <- 2 a <- 3 # <= error here a <- 1 b <- 10 a <- a + b # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e203","dir":"Articles","previous_headings":"","what":"E203","title":"DSL parse errors","text":"relationship (~) shadowing previous assignment. assigning variable declared symbol refers parameter. Example:","code":"a <- 1 a ~ Normal(0, 1) # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e204","dir":"Articles","previous_headings":"","what":"E204","title":"DSL parse errors","text":"assignment (<-) shadowing previous relationship. Example:","code":"a ~ Normal(0, 1) a <- 10"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e205","dir":"Articles","previous_headings":"","what":"E205","title":"DSL parse errors","text":"Variables used order. using odin big departure - moment must declare expressions (assignments relationships) order. However, forbid multiple assignment may relax future, existing programs changed.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e206","dir":"Articles","previous_headings":"","what":"E206","title":"DSL parse errors","text":"Failed differentiate model. error seen possible differentiate model requested gradient available. functions supported DSL can currently differentiated monty; think , please let us know.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e207","dir":"Articles","previous_headings":"","what":"E207","title":"DSL parse errors","text":"value fixed shadowed assignment relationship. pass fixed data may used left hand side expression DSL code.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"some-simple-examples","dir":"Articles","previous_headings":"","what":"Some simple examples","title":"Probabilistic DSL","text":"chapter 4 Statistical Rethinking, build regression model height parameters α\\alpha, β\\beta σ\\sigma. can define model prior probability model monty running define new monty_model() object represents prior, bits might need depending want use : model parameters defined order appear definition (alpha first sigma last) can compute domain model: can draw samples model provide monty_rng object can compute (log) density point parameter space computed properties model :","code":"prior <- monty_dsl({   alpha ~ Normal(178, 20)   beta ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) prior$parameters #> [1] \"alpha\" \"beta\"  \"sigma\" prior$domain #>       [,1] [,2] #> alpha -Inf  Inf #> beta  -Inf  Inf #> sigma    0   50 rng <- monty_rng_create() theta <- monty_model_direct_sample(prior, rng) theta #> [1] 167.700794  -5.085348   8.899977 monty_model_density(prior, theta) #> [1] -11.31011 prior$properties #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> • has_gradient: `TRUE` #> • has_direct_sample: `TRUE` #> • is_stochastic: `FALSE` #> • has_parameter_groups: `FALSE` #> • has_observer: `FALSE` #> • allow_multiple_parameters: `TRUE`"},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"calculations-in-the-dsl","dir":"Articles","previous_headings":"","what":"Calculations in the DSL","title":"Probabilistic DSL","text":"Sometimes useful perform calculations code; can assignments. trivially, giving names numbers may help make code understandable: can also use things like: c drawn normal distribution mean average b.","code":"m <- monty_dsl({   mu <- 10   sd <- 2   a ~ Normal(mu, sd) }) m <- monty_dsl({   a ~ Normal(0, 1)   b ~ Normal(0, 1)   mu <- (a + b) / 2   c ~ Normal(mu, 1) })"},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"pass-in-fixed-data","dir":"Articles","previous_headings":"","what":"Pass in fixed data","title":"Probabilistic DSL","text":"can also pass list data values available DSL code. example, first example: Might written Values pass way fixed (hence name!) modified model object created.","code":"prior <- monty_dsl({   alpha ~ Normal(178, 20)   beta ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) fixed <- list(alpha_mean = 170, alpha_sd = 20,               beta_mean = 0, beta_sd = 10,               sigma_max = 50) prior <- monty_dsl({   alpha ~ Normal(alpha_mean, alpha_sd)   beta ~ Normal(beta_mean, beta_sd)   sigma ~ Uniform(0, sigma_max) }, fixed = fixed)"},{"path":"https://mrc-ide.github.io/monty/articles/migration.html","id":"where-is-everything","dir":"Articles","previous_headings":"","what":"Where is everything?","title":"Migration from mcstate","text":"features moved package dust2:","code":""},{"path":"https://mrc-ide.github.io/monty/articles/migration.html","id":"the-particle-filter","dir":"Articles","previous_headings":"Where is everything?","what":"The particle filter","title":"Migration from mcstate","text":"particle filter moved dust2, see dust2::dust_filter_create previously method old particle_filter object now changed free function: dust_unfilter_create deterministic models addition, differentiable deterministic models dust_likelihood_last_gradient() get gradient likelihood last point.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/migration.html","id":"other-state-space-methods","dir":"Articles","previous_headings":"Where is everything?","what":"Other state space methods","title":"Migration from mcstate","text":"mcstate, implemented two sequential Monte Carlo methods: SMC^2 IF2. Neither reimplemented yet, appear dust . Please let us know used !","code":""},{"path":"https://mrc-ide.github.io/monty/articles/migration.html","id":"running-mcmc","dir":"Articles","previous_headings":"","what":"Running MCMC","title":"Migration from mcstate","text":"specified configured totally changed, point really meaningful table-based comparison methods. typical use mcstate looked like (adapted simplification old SIR models vignette) monty look like: contains roughly bits information quite different presentation: way parameters specified: mcstate pmcmc_parameter pmcmc_parameters, one function combination included sampler’s proposal kernel! bit silly. Now: * use packer interface smooth gap convenient represent parameters odin model need represent think moving around parameter space * use DSL specify priors, removing need write distributions, sample distributions automatically prevent forgetting log = TRUE densities. pmcmc_control object gone: contained information really affected filter (e.g., save_state moved dust_likelihood_monty function) running chain . control samplers moved new sampler object: needed additional level control allow different samplers used different situations (e.g., allow HMC case deterministic differentiable density).","code":"filter <- mcstate::particle_filter$new(data = ..., model = ..., compare = ...,                                        n_particles = ...) beta <- mcstate::pmcmc_parameter(\"beta\", 0.2, min = 0) gamma <- mcstate::pmcmc_parameter(\"gamma\", 0.1, min = 0, prior = function(p)   dgamma(p, shape = 1, scale = 0.2, log = TRUE))  proposal_matrix <- diag(0.1, 2) mcmc_pars <- mcstate::pmcmc_parameters$new(list(beta = beta, gamma = gamma),                                            proposal_matrix) control <- mcstate::pmcmc_control(     n_steps,     save_state = TRUE,     save_trajectories = TRUE,     progress = TRUE) samples <- mcstate::pmcmc(mcmc_pars, filter, control = control) filter <- dust_filter_create(generator, time_start, data, n_particles) packer <- monty_packer(c(\"beta\", \"gamma\")) model <- dust_likelihood_monty(filter, packer,                                save_state = TRUE,                                save_trajectories = TRUE) prior <- monty_dsl({   beta ~ Uniform(0, 100)   gamma ~ Gamma(shape = 1, scale = 0.2) }) sampler <- monty_sampler_random_walk(diag(0.2, 2)) samples <- monty_sample(model + prior, sampler, n_steps)"},{"path":"https://mrc-ide.github.io/monty/articles/monty.html","id":"the-basic-idea","dir":"Articles","previous_headings":"","what":"The basic idea","title":"Introduction to monty","text":"Draw samples model using Markov Chain Monte Carlo methods. need: model: monty_model() object minimally knows names parameter vector (unstructured real-valued vector) can compute log probability density. may also able compute gradient log density, sample directly parameter space (e.g., represents prior distribution). sampler: method drawing samples model’s distribution sequence. define several different sampler types, simplest one monty_sampler_random_walk(), implements simple Metropolis algorithm random walk. runner: controls chains run (e.g., one another parallel). system designed composable; can work Bayesian way defining model representing likelihood another model representing prior pick sampler based capabilities model, pick runner based capabilities computer. monty_model() interface designed flexible user-friendly. expect write higher-level interface help work , describe write wrappers models implemented packages (might write model dust odin adaptor make easy work tools provided monty start making inferences model).","code":""},{"path":"https://mrc-ide.github.io/monty/articles/monty.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Introduction to monty","text":"starting example, ’s worth noting far better tools model sort thing (stan, bugs, jags, R - really anything). aim section derive simple model may feel familiar. strength package performing inference custom models can’t expressed high level interfaces.  simple likelihood, following model formulation “Statistical Rethinking” chapter 3; height modelled normally distributed departures linear relationship weight. can wrap density function monty_model. data argument “fixed” - ’s part statistical model, ’ll pass fixed argument: construct prior model using monty DSL (vignette(\"dsl\")), using normally distributed priors b, weak uniform prior sigma. posterior distribution combination two models (indicated + ’re adding log-scale, using prior posterior; can use monty_model_combine() prefer). Constructing sensible initial variance-covariance matrix bit trick, using adaptive sampler reduces pain . values chosen reasonable starting points. Now run sampler. ’ve started good starting point make simple sampler converge quickly: don’t aim directly provide tools visualising working samples, well trodden ground packages. However, can directly plot density time:  plots estimated parameters:  coda installed can convert samples coda mcmc.list using coda::.mcmc.list(), posterior installed can convert draws_df using posterior::as_draws_df(), can probably use favourite plotting tools. See vignette(\"samplers\") information.","code":"head(data) #>     height   weight #> 1 162.5401 45.92805 #> 2 159.9566 51.19368 #> 3 156.1808 44.56841 #> 4 168.4164 60.36933 #> 5 158.6978 52.14180 #> 6 154.7666 44.66696 plot(height ~ weight, data) fn <- function(a, b, sigma, data) {   mu <- a + b * data$weight   sum(dnorm(data$height, mu, sigma, log = TRUE)) } likelihood <- monty_model_function(fn, fixed = list(data = data)) likelihood #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ See `?monty_model()` for more information prior <- monty_dsl({   a ~ Normal(178, 100)   b ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) prior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information posterior <- likelihood + prior posterior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ This model: #> • can be directly sampled from #> ℹ See `?monty_model()` for more information vcv <- rbind(c(4.5, -0.088, 0.076),              c(-0.088, 0.0018, -0.0015),              c(0.076, -0.0015, 0.0640)) sampler <- monty_sampler_random_walk(vcv = vcv) samples <- monty_sample(posterior, sampler, 2000, initial = c(114, 0.9, 3),                         n_chains = 4) #> ⡀⠀ Sampling [▁▁▁▁] ■                                |   0% ETA: 46s #> ✔ Sampled 8000 steps across 4 chains in 763ms #> matplot(samples$density, type = \"l\", lty = 1,         xlab = \"log posterior density\", ylab = \"sample\", col = \"#00000055\") par(mfrow = c(1, 3)) plot(density(samples$pars[\"a\", , ]), main = \"a\") abline(v = 114, col = \"red\") plot(density(samples$pars[\"b\", , ]), main = \"b\") abline(v = 0.9, col = \"red\") plot(density(samples$pars[\"sigma\", , ]), main = \"sigma\") abline(v = 3, col = \"red\")"},{"path":[]},{"path":"https://mrc-ide.github.io/monty/articles/samplers.html","id":"the-bendy-banana","dir":"Articles","previous_headings":"Comparisons","what":"The bendy banana","title":"Samplers","text":"example shows HMC outperforming random walk two dimensional banana-shaped function. model takes two parameters alpha beta, based two successive simple draws, one conditional , β∼Normal(1,0)\\beta \\sim Normal(1,0) α∼Normal(β2,σ)\\alpha \\sim Normal(\\beta^2, \\sigma), σ\\sigma standard deviation conditional draw. include example within package; create model σ=0.5\\sigma = 0.5 can plot visualisation density computing density grid. Normally possible course:  particular case can also easily generate samples, know good sampler produce:  also possible compute 95% confidence interval distribution using relationship standard bivariate normal distribution banana shaped distribution defined . can check roughly 10 samples (200) 95% CI contour.","code":"m <- monty_example(\"banana\", sigma = 0.5) m #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information a <- seq(-2, 6, length.out = 1000) b <- seq(-2, 2, length.out = 1000) z <- outer(a, b, function(alpha, beta) {   exp(monty_model_density(m, rbind(alpha, beta))) }) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") rng <- monty_rng_create() s <- vapply(seq(200), function(x) m$direct_sample(rng), numeric(2)) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") points(s[1, ], s[2, ], pch = 19, col = \"#00000055\") theta <- seq(0, 2 * pi, length.out = 10000) z95 <- local({   sigma <- 0.5   r <- sqrt(qchisq(.95, df = 2))   x <- r * cos(theta)   y <- r * sin(theta)   cbind(x^2 + y * sigma, x) }) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") lines(z95[, 1], z95[, 2]) points(s[1, ], s[2, ], pch = 19, col = \"#00000055\")"},{"path":"https://mrc-ide.github.io/monty/articles/samplers.html","id":"sampling-with-other-samplers","dir":"Articles","previous_headings":"Comparisons","what":"Sampling with other samplers","title":"Samplers","text":"generally possible directly sample density (otherwise MCMC similar methods exist!). cases need use sampler based density available possibly gradient density. can start basic random-walk sampler:  can see great, exhibiting strong random walk behaviour slowly explores surface (1,000 steps). Another way view parameters varying steps: can probably improve samples finding better variance covariance matrix (VCV), single VCV hold well whole surface similar multivariate normal (, appropriate VCV change depending position parameter space) Let’s try Hamiltonian Monte Carlo (HMC) sampler, uses gradient move efficiently parameter space:  viewed steps:  Clearly better!","code":"sampler_rw <- monty_sampler_random_walk(vcv = diag(2) * 0.01) res_rw <- monty_sample(m, sampler_rw, 1000) #> ⡀⠀ Sampling  ■                                |   0% ETA:  3s #> ✔ Sampled 1000 steps across 1 chain in 43ms #>  plot(t(drop(res_rw$pars)), type = \"l\", col = \"#0000ff66\",      xlim = range(a), ylim = range(b)) lines(z95[, 1], z95[, 2]) matplot(t(drop(res_rw$pars)), lty = 1, type = \"l\", col = c(2, 4),         xlab = \"Step\", ylab = \"Value\") sampler_hmc <- monty_sampler_hmc(epsilon = 0.1, n_integration_steps = 10) res_hmc <- monty_sample(m, sampler_hmc, 1000) plot(t(drop(res_hmc$pars)), type = \"l\", col = \"#0000ff33\",      xlim = range(a), ylim = range(b)) lines(z95[, 1], z95[, 2]) matplot(t(drop(res_hmc$pars)), lty = 1, type = \"l\", col = c(2, 4),         xlab = \"Step\", ylab = \"Value\")"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"the-structure-of-monty-samples","dir":"Articles","previous_headings":"","what":"The structure of monty samples","title":"Working with samples","text":"samplers runners produce samples basic structure. structure documented () free use structure want just dive manipulate things. Please treat output read-; extract data want, make copy don’t change value within samples structure going pass back monty function, assume modified. , samples poorly mixed result samples 2 parameters, 2000 samples, 4 chains. result running monty_sample() banana model vignette(\"samplers\"), class monty_samples. monty_samples object contains element pars contains sampled parameters","code":"samples #>  #> ── <monty_samples: 2 parameters x 2000 samples x 4 chains> ───────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ! posterior::as_draws_array() [package installed, but not loaded] #> → ! posterior::as_draws_df() [package installed, but not loaded] #> → ! coda::as.mcmc.list() [package installed, but not loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information dim(samples$pars) #> [1]    2 2000    4"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"conversion-to-posteriors-draw-objects","dir":"Articles","previous_headings":"The structure of monty samples","what":"Conversion to posterior’s draw objects","title":"Working with samples","text":"implement methods posterior::as_draws_array posterior::as_draws_df, can use convert formats might familiar use statistical packages. preserves parameters ($pars) . , can access summary methods already implemented elsewhere: objects able use plotting functions bayesplot, example, MCMC visual diagnostics, without much trouble. also support conversion draws_array; let us know need conversion functions (as_draws_list, as_draws_rvars, as_draws_matrix).","code":"samples_df <- posterior::as_draws_df(samples) posterior::summarise_draws(samples_df) #> # A tibble: 2 × 10 #>   variable  mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 alpha    2.27   0.645  3.06  1.39 -0.612  7.73  1.85     5.79     43.5 #> 2 beta     0.608  0.364  1.39  1.02 -2.05   2.78  2.10     5.32     11.7"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"conversion-to-codas-mcmc-list-objects","dir":"Articles","previous_headings":"The structure of monty samples","what":"Conversion to coda’s mcmc.list objects","title":"Working with samples","text":"coda package utilities working MCMC, many packages compatible mcmc.list object type (e.g., ggmcmc package). provide method coda’s .mcmc.list, package available:","code":"samples_coda <- coda::as.mcmc.list(samples) coda::effectiveSize(samples_coda) #>    alpha     beta  #> 39.92519 68.47306"},{"path":"https://mrc-ide.github.io/monty/articles/writing-samplers.html","id":"when-might-you-want-to-create-a-new-sampler","dir":"Articles","previous_headings":"","what":"When might you want to create a new sampler?","title":"Writing samplers","text":"don’t anticipate many people want create new sampler, can new algorithm want try. can simple wanting flexible update scheme moves around parameters different way (say) random walk sampler, might sampler different sort process. Anything process involves integer values want new sampler, existing ones assume parameters real line. intention easy enough create sampler, can function perfectly well outside monty package, making package easy extend.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/writing-samplers.html","id":"a-toy-problem","dir":"Articles","previous_headings":"","what":"A toy problem","title":"Writing samplers","text":"Let’s draw samples 5-dimensional Gaussian unit variance mean 0:","code":"library(monty) model <- monty_example(\"gaussian\", diag(5))"},{"path":"https://mrc-ide.github.io/monty/articles/writing-samplers.html","id":"a-toy-sampler","dir":"Articles","previous_headings":"","what":"A toy sampler","title":"Writing samplers","text":"toy sampler sample point axis, sequentially, accepting rejecting . ’ll use random normal proposal dimension control parameter standard deviation proposal; vector length 5 case. sampler stateless now - , nothing stored state. Initialisation therefore trivial almost nothing . However, can check control parameters make sense model given: step function actual interesting work happens: can write constructor, takes sd argument: ’s . can now use new sampler toy problem:","code":"toy_sampler_initialise <- function(state_chain, control, model, rng) {   n_sd <- length(control$sd)   n_pars <- length(model$parameters)   if (n_sd != n_pars) {     cli::cli_abort(\"'control$sd' has length {n_sd} but your model has {n_pars} parameter{?s}\")   }   NULL } toy_sampler_step <- function(state_chain, state_sampler, control, model, rng) {   pars <- state_chain$pars   density <- state_chain$density   sd <- control$sd   n_pars <- length(sd) # same as length(model$parameters)    for (i in seq_len(n_pars)) {     pars_next <- pars     pars_next[[i]] <- monty_random_normal(pars[[i]], sd[[i]], rng)     density_next <- monty_model_density(model, pars_next)     accept <- density_next > density ||       density_next - density > log(monty_random_real(rng))     if (accept) {       pars <- pars_next       density <- density_next     }   }    # Put state back together and return   state_chain$pars <- pars   state_chain$density <- density   state_chain } toy_sampler <- function(sd) {   control <- list(sd = sd)   monty_sampler(     \"Toy Sampler\",     \"toy_sampler\",     control,     toy_sampler_initialise,     toy_sampler_step) } sampler <- toy_sampler(rep(0.2, 5)) samples <- monty_sample(model, sampler, 100) #> ⡀⠀ Sampling  ■                                |   1% ETA:  3s #> ✔ Sampled 100 steps across 1 chain in 73ms #>  samples #>  #> ── <monty_samples: 5 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'a', 'b', 'c', 'd', and 'e' #> ℹ Conversion to other types is possible: #> → ! posterior::as_draws_array() [package installed, but not loaded] #> → ! posterior::as_draws_df() [package installed, but not loaded] #> → ! coda::as.mcmc.list() [package installed, but not loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information"},{"path":"https://mrc-ide.github.io/monty/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rich FitzJohn. Author, maintainer. Wes Hinsley. Author. Ed Knock. Author. Marc Baguelin. Author. Imperial College Science, Technology Medicine. Copyright holder.","code":""},{"path":"https://mrc-ide.github.io/monty/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FitzJohn R, Hinsley W, Knock E, Baguelin M (2025). monty: Monte Carlo Models. R package version 0.4.5, https://mrc-ide.github.io/monty.","code":"@Manual{,   title = {monty: Monte Carlo Models},   author = {Rich FitzJohn and Wes Hinsley and Ed Knock and Marc Baguelin},   year = {2025},   note = {R package version 0.4.5},   url = {https://mrc-ide.github.io/monty}, }"},{"path":"https://mrc-ide.github.io/monty/index.html","id":"monty-","dir":"","previous_headings":"","what":"Monte Carlo Models","title":"Monte Carlo Models","text":"monty toolbox Monte Carlo methods. designed help run MCMC models fit closely within paradigms packages stan - example likelihood written hand. See package vignette basic introduction. core package built around basic ideas: statistical model like draw samples using MCMC (monty::monty_sample) can choose different samplers depending properties model can specify priors model high-level DSL can power stochastic models fast, parallelisable, random number generator, use R C++","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"related-tools","dir":"","previous_headings":"","what":"Related tools","title":"Monte Carlo Models","text":"monty complete rewrite ideas mcstate, though bits mcstate moved dust2. dust2 package provides machinery run particle filters sequential Monte Carlo methods using random number support monty can create statistical models can used monty’s samplers odin2 package can generate dynamical models use monty’s random number generators can used part dust2 particle filter. odin2 DSL monty DSL closely related.","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Monte Carlo Models","text":"basic functionality package place, plan work : improving debugging tools models fail mid-chain implementing parallel tempering, allowing compose supported sampler improving support nested models improving expanding DSL","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Models","text":"Please install r-universe: prefer, can install GitHub remotes:","code":"install.packages(   \"monty\",   repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) remotes::install_github(\"mrc-ide/monty\", upgrade = FALSE)"},{"path":"https://mrc-ide.github.io/monty/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Monte Carlo Models","text":"MIT © Imperial College Science, Technology Medicine","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate expressions — monty_differentiation","title":"Differentiate expressions — monty_differentiation","text":"Differentiate expressions monty DSL.  function exported advanced use, really can use odin.  potential generally useful, tweak interface quite lot next fine use can handle disruption.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate expressions — monty_differentiation","text":"","code":"monty_differentiation()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate expressions — monty_differentiation","text":"list related objects: differentiate: function can differentiate expression respect variable (string). maths: mathematical utilities constructing expressions.  documented later, useful bits function elements times, plus plus_fold. expand soon advertise functions able differentiate allow programs fail fast.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate expressions — monty_differentiation","text":"R already support differentiating expressions using D, useful creating derivatives simple functions pass non-linear optimisation.  need something bit flexible differentiating models monty DSL (monty_dsl) also related odin DSL.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"differences-to-d-","dir":"Reference","previous_headings":"","what":"Differences to D()","title":"Differentiate expressions — monty_differentiation","text":"try little harder simplify expressions. distribution functions monty DSL (e.g., Poisson) () handled specially, allowing substitution log-densities expectations. support array expressions, able differentiate .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"roadmap","dir":"Reference","previous_headings":"","what":"Roadmap","title":"Differentiate expressions — monty_differentiation","text":"may need make slightly extensible future, now set functions can differentiated closed.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Differentiate expressions — monty_differentiation","text":"way accessing distribution support peculiar return type unusual.  intentional, expect conventional interface future package settles .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate expressions — monty_differentiation","text":"","code":"d <- monty_differentiation() d$differentiate(quote(sqrt(sin(x))), \"x\") #> cos(x)/(2 * sqrt(sin(x))) D(quote(sqrt(sin(x))), \"x\") #> 0.5 * (cos(x) * sin(x)^-0.5)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand (and check) domain against a packer — monty_domain_expand","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"Check expand domain, used alongside monty_packer object.  can used expand domains logical parameters (e.g. vector b) specific names (e.g., b[1], b[2], etc) without rely internals names constructed.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"","code":"monty_domain_expand(domain, packer)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"domain two-column matrix defined monty_model, row names corresponding either logical names (e.g., b) specific names b[1] present packer. NULL allowed parameters defined entire real line. packer monty_packer object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"two dimensional matrix representing domain, NULL domain given NULL.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"","code":"packer <- monty_packer(c(\"a\", \"b\"), list(x = 3, y = c(2, 2))) monty_domain_expand(NULL, packer) #> NULL monty_domain_expand(rbind(x = c(0, 1)), packer) #>      [,1] [,2] #> x[1]    0    1 #> x[2]    0    1 #> x[3]    0    1 monty_domain_expand(rbind(x = c(0, 1), \"x[2]\" = c(0, Inf)), packer) #>      [,1] [,2] #> x[1]    0    1 #> x[2]    0  Inf #> x[3]    0    1 monty_domain_expand(rbind(x = c(0, 1), \"y\" = c(0, Inf)), packer) #>        [,1] [,2] #> x[1]      0    1 #> x[2]      0    1 #> x[3]      0    1 #> y[1,1]    0  Inf #> y[2,1]    0  Inf #> y[1,2]    0  Inf #> y[2,2]    0  Inf"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Specific Language for monty — monty_dsl","title":"Domain Specific Language for monty — monty_dsl","text":"Create model using monty DSL; function likely change name future, interface.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Specific Language for monty — monty_dsl","text":"","code":"monty_dsl(x, type = NULL, gradient = NULL, fixed = NULL, domain = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Specific Language for monty — monty_dsl","text":"x model expression.  may given expression, string, path filename.  Typically, reasonable job working provided use type argument disambiguate force particular interpretation.  argument uses rlang's quosures allow work expressions directly; see examples details. type Force interpretation type expression given x.  given, valid options expression, text file. gradient Control gradient derivation.  NULL (default) try generate gradient function model warn possible.  FALSE, attempt construct gradient function, prevents warning generated possible.  TRUE, error possible create gradient function. fixed optional list values can used within DSL code.  Anything provide available calculations.  interest future compatibility, check currently elements scalars.  future may become flexible allow passing environments, etc.  provided, values changed without rebuilding model; fixed data.  might use hyperparameters fixed across set model runs, example. domain optional domain.  Normally wanted, can use truncate domain one parameters.  domain effectively applied calculations implied DSL.  density recalculated reflect change marginal density. Applying domain remove ability sample model, least now.  See monty_model details format.  provided parameters must match parameters model.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain Specific Language for monty — monty_dsl","text":"monty_model object derived expressions provide.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Specific Language for monty — monty_dsl","text":"","code":"# Expressions that define models can be passed in with no quoting monty_dsl(a ~ Normal(0, 1)) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 1 parameter: 'a' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information monty_dsl({   a ~ Normal(0, 1)   b ~ Exponential(1) }) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'a' and 'b' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information  # You can also pass strings monty_dsl(\"a ~ Normal(0, 1)\") #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 1 parameter: 'a' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about supported distributions — monty_dsl_distributions","title":"Information about supported distributions — monty_dsl_distributions","text":"Report information supported distributions DSL.  primarily intended use packages use monty_dsl_parse_distribution, function reports information distributions arguments succeed .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about supported distributions — monty_dsl_distributions","text":"","code":"monty_dsl_distributions()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about supported distributions — monty_dsl_distributions","text":"data.frame columns name name distribution; name begins capital letter, duplicate names different parameterisations supported. args arguments parameters, except random variable given first argument density functions. may expand output future include information distributions support C++, might end supporting everything way soon.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about supported distributions — monty_dsl_distributions","text":"","code":"monty_dsl_distributions() #>                  name         args #> 1                Beta         a, b #> 2        BetaBinomial size, pr.... #> 3        BetaBinomial   size, a, b #> 4            Binomial   size, prob #> 5              Cauchy location.... #> 6         Exponential         rate #> 7         Exponential         mean #> 8               Gamma  shape, rate #> 9               Gamma shape, scale #> 10     Hypergeometric      m, n, k #> 11          LogNormal meanlog,.... #> 12   NegativeBinomial   size, prob #> 13   NegativeBinomial     size, mu #> 14             Normal     mean, sd #> 15            Poisson       lambda #> 16    TruncatedNormal mean, sd.... #> 17            Uniform     min, max #> 18            Weibull shape, scale #> 19 ZINegativeBinomial pi0, siz.... #> 20 ZINegativeBinomial pi0, siz.... #> 21          ZIPoisson  pi0, lambda"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain monty error — monty_dsl_error_explain","title":"Explain monty error — monty_dsl_error_explain","text":"Explain error codes produced monty.  work progress, like feedback useful improve . idea see error can link get information means resolve .  current implementation send rendered vignettes, future arrange offline rendering .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain monty error — monty_dsl_error_explain","text":"","code":"monty_dsl_error_explain(code, how = \"pretty\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain monty error — monty_dsl_error_explain","text":"code error code, string, form Exxx (capital \"E\" followed three numbers) explain error. Options pretty (render pretty text console), plain (display plain text console) link (browse online help).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain monty error — monty_dsl_error_explain","text":"Nothing, called side effect ","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain monty error — monty_dsl_error_explain","text":"","code":"monty_dsl_error_explain(\"E201\") #>  #> ── E201 ──────────────────────────────────────────────────────────────────────── #> Duplicated relationships (with `~`). #>  #> Example: #>  #>     a ~ Normal(0, 1) #>     b ~ Uniform(0, 1) #>     a ~ Exponential(1) # <= error here #>  #> Relationships must be unique because each represents a parameter, and a #> parameter can't be represented by two different distributions. #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse distribution expression — monty_dsl_parse_distribution","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"Parse expression call one monty's distribution functions (e.g., Normal, Poisson).  fill defaults, disambiguate multiple parameterisations distribution available, provide links C++ API.  function designed use packages use monty, unlikely useful users.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"","code":"monty_dsl_parse_distribution(expr, name = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"expr expression name Name expression, used constructing messages can use errors.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"list; contents subject change. However can (degree) rely following elements: name: name distribution (e.g., Normal).  name function called expr variant: name distribution variant, one supported. args: arguments provided, position-matched order cpp: names C++ entrypoint use.  list elements density sample log-density sampling functions, NULL yet exist. Currently also include: density: function compute log-density.  likely change support creation differentiable models want something arguments provided! sample: function sample distribution, given (first argument) monty_rng object (see monty_rng_create)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"","code":"# A successful match monty_dsl_parse_distribution(quote(Normal(0, 1))) #> $success #> [1] TRUE #>  #> $value #> $value$name #> [1] \"Normal\" #>  #> $value$variant #> NULL #>  #> $value$args #> $value$args[[1]] #> [1] 0 #>  #> $value$args[[2]] #> [1] 1 #>  #>  #> $value$density #> function (x, mean, sd)  #> dnorm(x, mean, sd, log = TRUE) #> <bytecode: 0x55f7d51e33c0> #> <environment: namespace:monty> #>  #> $value$domain #> [1] -Inf  Inf #>  #> $value$sample #> [1] \"monty_random_normal\" #>  #> $value$expr #> $value$expr$density #> -(x - mean)^2/(2 * sd^2) - log(2 * pi)/2 - log(sd) #>  #> $value$expr$mean #> mean #>  #>  #> $value$cpp #> $value$cpp$density #> [1] \"normal\" #>  #> $value$cpp$sample #> [1] \"normal\" #>  #>  #>   # An unsuccessful match monty_dsl_parse_distribution(quote(Normal())) #> $success #> [1] FALSE #>  #> $error #>                                                                       x  #>        \"Invalid call to 'Normal()'\" \"Failed to match given arguments: \"  #>                                   i                                   *  #>                \"Call should match:\"                          \"mean, sd\"  #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"Load small, ready-made target distributions demonstrations, tests, examples. models exist can create (hopefully) interesting examples documentation without becoming overwhelming. examples contain analytic gradient can thus also used explore gradient-based samplers monty_sampler_hmc.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"","code":"monty_example(name, ...)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"name Name example, string.  See Details supported models. ... Optional parameters passed create model.  models can created additional parameters, can tweak behaviour passing named parameters .  See Details.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"monty_model object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"supported-models-","dir":"Reference","previous_headings":"","what":"Supported models:","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"model arguments passed ... monty_example used set example.  creates monty_model object accept parameters, values argument parameters passed monty_model_density.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"banana","dir":"Reference","previous_headings":"","what":"banana","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"banana model two-dimensional banana-shaped function, strong local correlation.  example picked useful illustrating limitations random-walk proposals. model two parameters alpha beta based two successive draws, one conditional . can vary argument sigma model creation, default 0.5","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"gaussian","dir":"Reference","previous_headings":"","what":"gaussian","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"multivariate Gaussian centred origin.  Takes variance-covariance-matrix argument.  Parameters letters , b, ... number dimensions.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"ring","dir":"Reference","previous_headings":"","what":"ring","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"two-dimensional ring-shaped density whose log-density proportional $-(\\|x\\|-r)^2/(2\\,sd^2)$.  Includes analytic gradient direct sampler polar coordinates.  constructor takes arguments r (default 3) sd (default 0.2), parameters monty_model x1 x2 (corresponding two dimensions polar coordinates). Increasing r decreasing sd make ridge high probability space narrower; easiest visualise true densities (rather log density).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"mixture-d","dir":"Reference","previous_headings":"","what":"mixture2d","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"equal-weight mixture k isotropic 2D Gaussians standard deviation sd centres either provided argument (means) drawn uniformly square half-width spread (must provided means provided). Includes analytic gradient.","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load example models from monty. These models exist so that we can create (hopefully) interesting examples in the documentation without them becoming overwhelming. You should probably not use these for anything other than exploring the package. — monty_example","text":"","code":"# Small helper function to make the plotting easier show_2d_example <- function(m, rx, ry = rx, n = 101) {   x <- seq(rx[[1]], rx[[2]], length.out = n)   y <- seq(ry[[1]], ry[[2]], length.out = n)   xy <- unname(t(as.matrix(expand.grid(x, y))))   z <- exp(matrix(monty_model_density(m, xy), n, n))   image(x, y, z)   contour(x, y, z, add = TRUE, drawlabels = FALSE,           lwd = 0.5, col = \"#00000088\") }  # Banana target m_banana <- monty_example(\"banana\", sigma = 0.2) show_2d_example(m_banana, c(-0.5, 1.5), c(-1.5, 1.5))   # Ring target with radius 3 and narrow thickness m_ring <- monty_example(\"ring\", r = 3, sd = 0.25) show_2d_example(m_ring, c(-4, 4))   # 2D Gaussian mixture with 20 components m_mixture <- monty_example(\"mixture2d\", k = 20, sd = 0.5, spread = 4) show_2d_example(m_mixture, c(-5, 5))"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create basic model — monty_model","title":"Create basic model — monty_model","text":"Create basic monty model.  takes user-supplied object minimally can compute probability density (via density function) information parameters; can sample model using MCMC using monty_sample.  imagine many users call function directly, glue used packages.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create basic model — monty_model","text":"","code":"monty_model(model, properties = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create basic model — monty_model","text":"model list environment elements described Details. properties Optionally, monty_model_properties object, used enforce clarify properties model.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create basic model — monty_model","text":"object class monty_model.  elements: model: model provided parameters: parameter name vector parameter_groups: parameter groups domain: parameter domain matrix, named parameters direct_sample: direct_sample function, provided model gradient: gradient function, provided model properties: list properties model; see monty_model_properties().  Currently contains: has_gradient: model can compute gradient has_direct_sample: model can sample parameters space is_stochastic: model behave stochastically has_parameter_groups: model separable parameter groups","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create basic model — monty_model","text":"model argument can list environment (something indexable $) elements: density: function compute probability density.  must take argument representing parameter vector (numeric vector) return single value.  posterior probability density Bayesian inference, anything really.  Models can return -Inf things impossible, try cope gracefully wherever possible.  property allow_multiple_parameters TRUE, function must able handle argument parameter matrix,  return vector densities. parameters: character vector parameter names.  vector source truth length parameter vector. domain: Information parameter domain.  two column matrix length(parameters) rows representing parameter.  parameter minimum maximum bounds given first second column.  Infinite values (-Inf Inf) used parameter infinite domain .  Currently used translate bounded unbounded space HMC, might also use reflecting proposals MCMC , well fast way avoiding calculating densities proposals fall bounds.  present assume model valid everywhere (.e., parameters valid -Inf Inf.  unnamed, must provide domain parameters.  named, can provide subset, parameters included assumed domain (-Inf, Inf). direct_sample: function sample directly parameter space, given monty_rng object sample (see monty_rng_create).  case model returns posterior (e.g., Bayesian inference), assumed sampling prior.  use generating initial conditions MCMC given, possibly uses.  given using monty_sample() user provide vector initial states. gradient: function compute gradient density respect parameter vector; takes parameter vector returns vector length.  efficiency, model may want stateful gradients can efficiently calculated density calculation, density gradient, called parameters.  function optional (may well defined possible define). set_rng_state: function set state (contrast rng passed direct_sample sampler's rng stream, assume models look stream, may need many streams).  Models provide method assumed stochastic; however, can use is_stochastic property (via monty_model_properties()) override (e.g., run stochastic model deterministic expectation).  function takes raw vector random number state monty_rng uses set random number state model; derived random number stream particular chain, jumped ahead. get_rng_state: function get RNG state; must provided set_rng_state present.  Must return random number state, raw vector (potentially quite long). parameter_groups: Optionally, integer vector indicating parameter group membership.  format may change (especially explore complex nestings) present parameters group 0 affect everything (accepted rejected whole), parameters groups 1 n independent (example, changing parameters group 2 affect density parameters proposed group 3).","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two models — monty_model_combine","title":"Combine two models — monty_model_combine","text":"Combine two models multiplication.  need better name .  Bayesian inference want create model represents multiplication likelihood prior (log space) convenient think models separately.  Multiplying probabilities (adding log scale) common enough may situations want .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two models — monty_model_combine","text":"","code":"monty_model_combine(a, b, properties = NULL, name_a = \"a\", name_b = \"b\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two models — monty_model_combine","text":"first model b second model properties monty_model_properties object, used control (enforce) properties combined model. name_a Name first model (defaulting ''); can use make error messages nicer read, practical effect. name_b Name first model (defaulting 'b'); can use make error messages nicer read, practical effect.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two models — monty_model_combine","text":"monty_model object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two models — monty_model_combine","text":"describe impact combining pair models density: sum log densities model parameters: union parameters model taken domain: restrictive domain taken parameter.  Parameters appear one model assumed infinite domain . gradient: models define gradient, sum gradients.  either define gradient, resulting model gradient support.  Set has_gradient = TRUE within `properties want enforce combination differentiable.  models disagree parameters, parameters missing model assumed (reasonably) zero gradient. direct_sample: one hard right thing .  neither model can directly sampled fine, directly sample.  one model can sampled can sample union parameters take function (case prior model combined likelihood).  cases errors, can avoided setting has_direct_gradient = FALSE properties. is_stochastic: model stochastic either component stochastic. properties model combined , reflecting properties joint model. model field ordered, unnamed, list containing two elements corresponding first second model (monty_model, underlying model, perhaps?).  part makes distinction two models ; components equivalent.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two models — monty_model_combine","text":"","code":"# A simple example; a model that contains something of interest, # and a simple prior from monty_dsl likelihood <- monty_example(\"banana\") prior <- monty_dsl({   alpha ~ Normal(0, 1)   beta ~ Normal(0, 10) }) posterior <- likelihood + prior posterior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information  # The same thing, more explicitly: monty_model_combine(likelihood, prior) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information  # Control properties of the combined model: monty_model_combine(likelihood, prior,                     monty_model_properties(has_gradient = FALSE)) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • accepts multiple parameters #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log density — monty_model_density","title":"Compute log density — monty_model_density","text":"Compute log density model.  wrapper around $density property within monty_model object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log density — monty_model_density","text":"","code":"monty_model_density(model, parameters)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log density — monty_model_density","text":"model monty_model object parameters vector matrix parameters","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log density — monty_model_density","text":"log-density value, vector log-density values","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log density — monty_model_density","text":"","code":"m <- monty_model_function(function(a, b) dnorm(0, a, b, log = TRUE)) monty_model_density(m, c(0, 1)) #> [1] -0.9189385 monty_model_density(m, c(0, 10)) #> [1] -3.221524"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly sample from a model — monty_model_direct_sample","title":"Directly sample from a model — monty_model_direct_sample","text":"Directly sample model.  models support , error thrown possible.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly sample from a model — monty_model_direct_sample","text":"","code":"monty_model_direct_sample(model, rng, named = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly sample from a model — monty_model_direct_sample","text":"model monty_model object rng Random number state, created monty_rng_create. Use RNG one stream may may work expected; something need tidy (mrc-5292) named Logical, indicating output named using parameter names.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly sample from a model — monty_model_direct_sample","text":"vector matrix sampled parameters","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly sample from a model — monty_model_direct_sample","text":"","code":"m <- monty_example(\"banana\")  r <- monty_rng_create() monty_model_direct_sample(m, r) #> [1] 0.2045067 0.2863123 monty_model_direct_sample(m, r, named = TRUE) #>     alpha      beta  #> 1.7613960 0.1409638   r <- monty_rng_create(n_streams = 3) monty_model_direct_sample(m, r) #>           [,1]        [,2]       [,3] #> alpha 4.119168 -0.01824816 -0.7010775 #> beta  2.157869  0.95892593  0.3348243 monty_model_direct_sample(m, r, named = TRUE) #>           [,1]      [,2]       [,3] #> alpha 2.676928 0.1371878  0.4383688 #> beta  1.329980 0.3987461 -0.2044148"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create monty_model from a function computing density — monty_model_function","title":"Create monty_model from a function computing density — monty_model_function","text":"Create monty_model function computes density. allows use R function simple monty model.  need advanced model features, interface may suit may prefer use monty_model directly.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create monty_model from a function computing density — monty_model_function","text":"","code":"monty_model_function(   density,   packer = NULL,   fixed = NULL,   domain = NULL,   allow_multiple_parameters = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create monty_model from a function computing density — monty_model_function","text":"density function compute log density.  can take number parameters packer Optionally, monty_packer object control function parameters packed numeric vector.  can typically omit arguments functions present numeric vector scalars. fixed Optionally, named list fixed values substitute call density.  used conjunction packer (use fixed argument monty_packer instead). domain Optional domain, see monty_model's arguments details.  can use \"logical\" names array parameters expanded described monty_domain_expand(). allow_multiple_parameters Logical, indicating passing vectors parameters return vector densities. FALSE default determine automatically.  aware R's recycling rules may mean always work expected!","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create monty_model from a function computing density — monty_model_function","text":"monty_model object computes log density provided density function, given numeric vector argument representing parameters.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create monty_model from a function computing density — monty_model_function","text":"interface expand future versions monty support gradients, stochastic models, parameter groups simultaneous calculation density.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create monty_model from a function computing density — monty_model_function","text":"","code":"banana <- function(a, b, sd) {   dnorm(b, log = TRUE) + dnorm((a - b^2) / sd, log = TRUE) } m <- monty_model_function(banana, fixed = list(sd = 0.25)) m #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'a' and 'b' #> ℹ See `?monty_model()` for more information  # Density from our new model. Note that this computes density # using an unstructured parameter vector, which is mapped to 'a' # and 'b': monty_model_density(m, c(0, 0)) #> [1] -1.837877  # Same as the built-in banana example: monty_model_density(monty_example(\"banana\"), c(0, 0)) #> [1] -1.837877  # You can constrain parameters, for example: fn <- function(a, b) {   dbeta(a, 2, 5, log = TRUE) + dnorm(b, log = TRUE) }  # Here 'a' must lie in [0, 1] so we pass this through as 'domain': pr <- monty_model_function(fn, domain = rbind(a = c(0, 1)))  # Now, out-of-bounds values will be converted to -Inf: monty_model_density(pr, c(0.5, 0.5)) # ok #> [1] -1.108477 monty_model_density(pr, c(0.5, 5)) # -Inf #> [1] -13.48348"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute gradient of log density — monty_model_gradient","title":"Compute gradient of log density — monty_model_gradient","text":"Compute gradient log density (returned monty_model_density) respect parameters.  models support , error thrown possible.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute gradient of log density — monty_model_gradient","text":"","code":"monty_model_gradient(model, parameters, named = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute gradient of log density — monty_model_gradient","text":"model monty_model object parameters vector matrix parameters named Logical, indicating output named using parameter names.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute gradient of log density — monty_model_gradient","text":"vector matrix gradients","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute gradient of log density — monty_model_gradient","text":"","code":"m <- monty_example(\"banana\") # Global maximum at (0, 0), and gradient is zero there: monty_model_density(m, c(0, 0)) #> [1] -1.837877 monty_model_gradient(m, c(0, 0)) #> [1] 0 0  # Nonzero gradient away from the origin: monty_model_gradient(m, c(0.4, 0.2)) #> [1] -1.440  0.376"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe model properties — monty_model_properties","title":"Describe model properties — monty_model_properties","text":"Describe properties model.  Use function optional, can pass return value properties argument monty_model enforce model actually properties.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe model properties — monty_model_properties","text":"","code":"monty_model_properties(   has_gradient = NULL,   has_direct_sample = NULL,   is_stochastic = NULL,   has_parameter_groups = NULL,   has_observer = NULL,   allow_multiple_parameters = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe model properties — monty_model_properties","text":"has_gradient Logical, indicating model gradient method.  Use NULL (default) detect model. has_direct_sample Logical, indicating model direct_sample method.  Use NULL (default) detect model. is_stochastic Logical, indicating model stochastic.  Stochastic models must supply set_rng_state get_rng_state methods. has_parameter_groups Logical, indicating model can decomposed parameter groups independent .  indicated using parameter_groups field within model object passed monty_model, presence by_group argument density (later may also support gradient).  Use NULL (default) detect model. has_observer Logical, indicating model \"observation\" function, describe fully soon. observer function observe takes arguments returns arbitrary data previously evaluated density. Use NULL (default) detect model. allow_multiple_parameters Logical, indicating density calculation can support passed matrix parameters (column corresponding different parameter set) return vector densities.  FALSE, support different approaches sort feature needed.  detected model, default FALSE always straightforward implement.  However, possible may much efficient (via vectorisation parallelisation) .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe model properties — monty_model_properties","text":"list class monty_model_properties modified.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe model properties — monty_model_properties","text":"","code":"# Default properties: monty_model_properties() #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> ℹ Unset: 'has_gradient', 'has_direct_sample', 'is_stochastic', 'has_parameter_groups', 'has_observer', and 'allow_multiple_parameters'  # Set some properties: monty_model_properties(has_gradient = TRUE, is_stochastic = FALSE) #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> • has_gradient: `TRUE` #> • is_stochastic: `FALSE` #> ℹ Unset: 'has_direct_sample', 'has_parameter_groups', 'has_observer', and 'allow_multiple_parameters'"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a combined model — monty_model_split","title":"Split a combined model — monty_model_split","text":"Split model combined monty_model_combine() constituent parts.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a combined model — monty_model_split","text":"","code":"monty_model_split(model, prior_first = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a combined model — monty_model_split","text":"model combined model prior_first Logical, indicating require model component prior listed first.  TRUE one component model plausibly prior, error.  See Details heuristic used.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a combined model — monty_model_split","text":"unnamed list length 2, component models. one model might prior listed first.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a combined model — monty_model_split","text":"assume split model can broken \"prior\" \"likelihood\" exactly one model: can directly sampled stochastic consumes parameters Typically, first criterion separate model prior likelihood (sample likelihood, use sampler, typically going perform action). prior_first FALSE just return parts.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create observer — monty_observer","title":"Create observer — monty_observer","text":"Create observer extract additional details model sampling process.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create observer — monty_observer","text":"","code":"monty_observer(observe, finalise = NULL, combine = NULL, append = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create observer — monty_observer","text":"observe function run arguments model (model passed monty_model) rng (rng object).  function return list.  best list returned named, duplicated names, return values exact dimensions every iteration.  , provide following arguments, going hard describe worse implement. finalise function runs single chain run, use simplify across samples drawn chain.  Takes single argument list one set observations per sample. combine function runs chains run, use simplify across chains.  Takes single argument, list one set observations per chain. append function runs continuation chain run (via monty_sample_continue.  Takes two arguments representing fully simplified observations first second chains.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create observer — monty_observer","text":"object class monty_observer can passed monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create observer — monty_observer","text":"Sometimes want extract additional information model chain runs.  case see running MCMC particle filter (pmcmc); case likelihood calculation running computing lots interesting quantities final state system (required onward simulation) filtered trajectories time.  stochastic even just rerun model sampled parameter sets, final states recovered depend also random number generators (practically want , quite expensive compute quantities). observer mechanism allows carry arbitrary additional calculations model end step.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a packer — monty_packer","title":"Build a packer — monty_packer","text":"Build packer, can used translate unstructured vector numbers (vector updated MCMC example) structured list named values, easier program .  useful bridge model parameters model's implementation, also useful state vector state-space model.  refer process taking named list scalars, vectors arrays converting single vector \"packing\" inverse \"unpacking\".","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a packer — monty_packer","text":"","code":"monty_packer(scalar = NULL, array = NULL, fixed = NULL, process = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a packer — monty_packer","text":"scalar Names scalars.  similar listing elements array values 1, though elements scalar placed ahead listed array within final parameter vector, elements array generated names include square brackets. array list, names correspond names arrays values correspond lengths.  Multiple dimensions allowed (provide element two entries represent dimensions matrix).  Zero-length integer vectors NULL values counted scalars, allows put scalars positions front packing vector. future, may able use strings values lengths, case looked within fixed. fixed named list fixed data inserted final unpacked list; added final list directly.  parameter packer context, typically represent additional pieces data model needs run, performing inference . process arbitrary R function passed final assembled list; may create additional entries, concatenated onto original list.  use take care return values names entries listed scalar, array fixed, error (pack() broken).  likely play around process future order get automatic differentiation work.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a packer — monty_packer","text":"object class monty_packer, elements: names: function returns character vector computed names; parameter packer context names statistical model use. unpack: function can unpack unstructured vector (say, statistical model parameters) structured list (say, generative model) pack: function can pack structured list data back numeric vector, example suitable statistical model.  ignores values created preprocess function present fixed. index: function produces named list element name value scalar array value indices within unstructured vector values can found, shape data unpacked.  limited use people. subset: experimental interface can used subset packer packer subset contents. Documentation provided interface settles, advanced use ! inputs: inputs used reconstitute packer.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a packer — monty_packer","text":"several places convenient work unstructured vector: MCMC typically discussed updating vector x another x' optimisation algorithm try find set values vector x minimises (maximises) function f(x) ode solver works vector x(t) (x time t) considers x(t + h) computing vector derivatives dx(t)/dt cases, algorithm needs vector numbers knows nothing represent.  Commonly, packed vector parameters.  vector x might actually represent parameters , b c vector [, b, c] - common pattern, probably implemented . complex settings, might want vector x collect structured quantities.  Suppose fitting model age-structured sex-structured parameter.  Rather series scalars packed vector x might series values destined treated vector:   might vector length 7, first three elements represent scalar values , b c next four vector d. Unpacked, might written :   machinery designed make transformations simple standardised within monty, flexible enough many situations.  also use within dust2 odin2 transformations vectors ODE state.","code":"| 1  2  3  4  5  6  7  | | a  b  c  d1 d2 d3 d4 | list(a = 1, b = 2, c = 3, d = 4:7)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"when-to-use-process","dir":"Reference","previous_headings":"","what":"When to use process","title":"Build a packer — monty_packer","text":"process function get---jail function designed let arbitrary transformations unpacking vector.  general, first choice use less easy reason tooling (example, develop automatic differentiation support use HMC algorithm, process function problematic need make sure can differentiate process). However, cases way achieve results. Imagine packing 2x2 covariance matrix vector order use within MCMC optimisation algorithm. Ultimately, unpacked vector need hold four elements (b11, b12, b21, b22), three distinct values two -diagonal elements (.e., b12 == b21).  might write passing b_raw = 3 array, unpacked list holds b_raw = c(b11, b12, b22).  write process something like:   creates symmetric 2x2 matrix b b_raw.","code":"process <- function(x) {   list(b = matrix(x$b_raw[c(1, 2, 2, 3)], 2, 2)) }"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"unpacking-matrices","dir":"Reference","previous_headings":"","what":"Unpacking matrices","title":"Build a packer — monty_packer","text":"use fixed process defining packer, can use $unpack() matrix higher-dimensional output.  two ways might like unpack sort output.  Assume matrix m 3 rows 2 columns; means two sets parameters state (one per column) 3 states within ; format MCMC parameters example. first return list ith element result unpacking ith parameter/state vector.  can running   second return named list three elements ith element unpacked version ith state.  case can pass matrix directly unpacker:   , elements m acquire additional dimension; scalars become vectors (one per set), vectors become matrices (one column per set) . approach generalises higher dimensional input, though suspect spend bit time head-scratching use .","code":"apply(m, 2, p$unpack) p$unpack(m)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"packing-lists-into-vectors-and-matrices","dir":"Reference","previous_headings":"","what":"Packing lists into vectors and matrices","title":"Build a packer — monty_packer","text":"unpacking operation common - MCMC proceeds, produces unstructured vector, unpack list order able easily work .  reverse much less common, take list convert vector (matrix, multidimensional array).  Use direction (\"packing\") may common using packers work output state-space models (e.g. odin2 dust2, use machinery). input pack() shape unpack() returned; named list numerical vectors, matrices arrays.  names must correspond names packer (.e., scalar names array).  element dimensions   ...object dimensions data ...residual dimensions hypothetical input pack. unfortunate ambiguity R's lack true scalar types avoid.  hard tell difference packing vector vs packing array dimensions 1.  See examples, please let us know behaviour needs changing.","code":"<...object, ...residual>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a packer — monty_packer","text":"","code":"# Here's a really simple example p <- monty_packer(c(\"a\", \"b\", \"c\")) p #>  #> ── <monty_packer> ────────────────────────────────────────────────────────────── #> ℹ Packing 3 parameters: 'a', 'b', and 'c' #> ℹ Use '$pack()' to convert from a list to a vector #> ℹ Use '$unpack()' to convert from a vector to a list #> ℹ See `?monty_packer()` for more information  p$pack(list(a = 1, b = 2, c = 3)) #> [1] 1 2 3 p$unpack(1:3) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>   # Sometimes we have a vector embedded in our parameters: p <- monty_packer(c(\"a\", \"b\"), list(v = 4)) p$pack(list(a = 1, b = 2, v = c(6, 7, 8, 9))) #> [1] 1 2 6 7 8 9 p$unpack(c(1, 2, 6, 7, 8, 9)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $v #> [1] 6 7 8 9 #>   # Or a higher dimensional structure such as a matrix: p <- monty_packer(c(\"a\", \"b\"), list(m = c(2, 2))) p$unpack(c(1, 2, 6, 7, 8, 9)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $m #>      [,1] [,2] #> [1,]    6    8 #> [2,]    7    9 #>   # You can use a packer to set \"fixed\" parameters that do not vary # with the underlying model being fit, but are required by your model. # This is simpler than the \"closure\" approach used previously in our # mcstate package and also easier to accommodate with differentiable # models: p <- monty_packer(   c(\"a\", \"b\"),   fixed = list(d = data.frame(n = 1:3, m = runif(3)))) p$unpack(1:2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $d #>   n          m #> 1 1 0.44670247 #> 2 2 0.37151118 #> 3 3 0.02806097 #>  p$pack(p$unpack(1:2)) #> [1] 1 2  # The example from above, where we create a symmetric 2 x 2 matrix # from a 3-element vector, alongside a scalar: p <- monty_packer(   scalar = \"a\",   array = list(b_flat = 3),   process = function(p) list(b = matrix(p$b_flat[c(1, 2, 2, 3)], 2, 2)))  # Unpacking we see \"b_flat\" is still in the list, but \"b\" is our # symmetric matrix: p$unpack(1:4) #> $a #> [1] 1 #>  #> $b_flat #> [1] 2 3 4 #>  #> $b #>      [,1] [,2] #> [1,]    2    3 #> [2,]    3    4 #>   # The processed elements are ignored on the return pack: p$pack(list(a = 1, b_flat = 2:4, b = matrix(c(2, 3, 3, 4), 2, 2))) #> [1] 1 2 3 4 p$pack(list(a = 1, b_flat = 2:4)) #> [1] 1 2 3 4  # R lacks scalars, which means that some packers will unpack # different inputs to the same outputs: p <- monty_packer(c(\"a\", \"b\")) p$unpack(1:2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  p$unpack(cbind(1:2)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>   # This means that we can't reliably pack these inputs in a way # that guarantees round-tripping is possible.  We have chosen to # prioritise the case where a *single vector* is round-trippable: p$pack(list(a = 1, b = 2)) #> [1] 1 2  # This ambiguity goes away if unpacking matices with more than one # column: p$unpack(matrix(1:6, 2, 3)) #> $a #> [1] 1 3 5 #>  #> $b #> [1] 2 4 6 #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a nested packer — monty_packer_grouped","title":"Build a nested packer — monty_packer_grouped","text":"Build grouped version monty_packer() basic idea; convert vector representation group numbers named list structured data, extra twist: time unstructured vector numbers contains values correspond multiple groups shared across groups others vary groups.  function lot bookkeeping relatively short amount code, familiar ideas monty_packer() continuing.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a nested packer — monty_packer_grouped","text":"","code":"monty_packer_grouped(   groups,   scalar = NULL,   array = NULL,   fixed = NULL,   process = NULL,   shared = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a nested packer — monty_packer_grouped","text":"groups character vector group names.  must present within scalar array arguments. scalar Names scalars.  similar listing elements array values 1, though elements scalar placed ahead listed array within final parameter vector, elements array generated names include square brackets. array list, names correspond names arrays values correspond lengths.  Multiple dimensions allowed (provide element two entries represent dimensions matrix).  Zero-length integer vectors NULL values counted scalars, allows put scalars positions front packing vector. future, may able use strings values lengths, case looked within fixed. fixed named list fixed data inserted final unpacked list; added final list directly.  parameter packer context, typically represent additional pieces data model needs run, performing inference . process arbitrary R function passed final assembled list group; may create additional entries, concatenated onto original list.  use take care return values names entries listed scalar, array fixed, error (pack() broken).  likely play around process future order get automatic differentiation work. shared Names elements scalar array shared among groups.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a nested packer — monty_packer_grouped","text":"object class monty_packer_grouped, elements monty_packer, though slightly different effects. names: function returns character vector computed names; parameter packer context names statistical model use. groups: function returns group names (groups argument supplied) unpack: function converting unstructured vector nested list.  element list conceptually result unpack() monty_packer(). pack: inverse unpack() less commonly performed. Convert nested list unstructured vector.  Quite lot validation required make sure input tampered , errors thrown validation may interpretable. index: nested version index() function monty_packer(). outer list groups, inner list contains position within original unstructured vector value can found.  clear us useful list. subset: function might eventually allow subsetting grouped packer.  Currently just errors.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a nested packer — monty_packer_grouped","text":"Recall monty_packer() original problem take unstructured vector like   unpack structured list like   aim allow values (say b c) shared (constant) groups others (d) vary group.  groups x y might try create something like   vector","code":"| 1  2  3  4  5  6  7  | | a  b  c  d1 d2 d3 d4 | list(a = 1, b = 2, c = 3, d = 4:7) list(   list(x = list(a = 3, b = 1, c = 2, d = 4:7),        y = list(a = 8, b = 1, c = 2, d = 9:12)) | 1  2  3  4  5  6  7  8  9  10 11 12 | | b  c  a  d1 d2 d3 d4 a  d1 d2 d3 d4 | | xy xy x  x  x  x  x  y  y  y  y  y  |"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer_grouped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a nested packer — monty_packer_grouped","text":"","code":"p <- monty_packer_grouped(c(\"x\", \"y\"), c(\"a\", \"b\", \"c\", \"d\", \"e\"),                           shared = c(\"b\", \"c\")) p$names() #> [1] \"b\"    \"c\"    \"a<x>\" \"d<x>\" \"e<x>\" \"a<y>\" \"d<y>\" \"e<y>\" p$unpack(1:8) #> $x #> $x$a #> [1] 3 #>  #> $x$b #> [1] 1 #>  #> $x$c #> [1] 2 #>  #> $x$d #> [1] 4 #>  #> $x$e #> [1] 5 #>  #>  #> $y #> $y$a #> [1] 6 #>  #> $y$b #> [1] 1 #>  #> $y$c #> [1] 2 #>  #> $y$d #> [1] 7 #>  #> $y$e #> [1] 8 #>  #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from beta distribution — monty_random_beta","title":"Sample from beta distribution — monty_random_beta","text":"Sample beta distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from beta distribution — monty_random_beta","text":"","code":"monty_random_beta(a, b, state)  monty_random_n_beta(n_samples, a, b, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from beta distribution — monty_random_beta","text":", b shape parameters state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from beta distribution — monty_random_beta","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from beta-binomial distribution — monty_random_beta_binomial_prob","title":"Sample from beta-binomial distribution — monty_random_beta_binomial_prob","text":"Sample beta-binomial distribution. two parameterisations available: one terms probability dispersion terms two shape parameters.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from beta-binomial distribution — monty_random_beta_binomial_prob","text":"","code":"monty_random_beta_binomial_prob(size, prob, rho, state)  monty_random_n_beta_binomial_prob(n_samples, size, prob, rho, state)  monty_random_beta_binomial_ab(size, a, b, state)  monty_random_n_beta_binomial_ab(n_samples, size, a, b, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from beta-binomial distribution — monty_random_beta_binomial_prob","text":"size number trials (zero ) prob mean probability success trial (0 1) rho dispersion parameter (0 1) state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream). first shape parameter (zero ) b second shape parameter (zero )","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_beta_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from beta-binomial distribution — monty_random_beta_binomial_prob","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from binomial distribution — monty_random_binomial","title":"Sample from binomial distribution — monty_random_binomial","text":"Sample binomial distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from binomial distribution — monty_random_binomial","text":"","code":"monty_random_binomial(size, prob, state)  monty_random_n_binomial(n_samples, size, prob, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from binomial distribution — monty_random_binomial","text":"size number trials prob probability success trial state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from binomial distribution — monty_random_binomial","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from binomial distribution — monty_random_binomial","text":"","code":"state <- monty_rng_create() monty_random_binomial(10, 0.3, state) #> [1] 3 table(monty_random_n_binomial(2000, 10, 0.3, state)) #>  #>   0   1   2   3   4   5   6   7   8  #>  58 264 445 524 369 244  66  25   5"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_cauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Cauchy distribution — monty_random_cauchy","title":"Sample from Cauchy distribution — monty_random_cauchy","text":"Sample Cauchy distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_cauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Cauchy distribution — monty_random_cauchy","text":"","code":"monty_random_cauchy(location, scale, state)  monty_random_n_cauchy(n_samples, location, scale, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_cauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Cauchy distribution — monty_random_cauchy","text":"location Location distribution (median mode) scale scale parameter specifies half-width half-maximum (HWHM) state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_cauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Cauchy distribution — monty_random_cauchy","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from exponential distribution — monty_random_exponential_rate","title":"Sample from exponential distribution — monty_random_exponential_rate","text":"Sample exponential distribution.  two parameterisations , one terms rate exponential, one terms mean (scale).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from exponential distribution — monty_random_exponential_rate","text":"","code":"monty_random_exponential_rate(rate, state)  monty_random_n_exponential_rate(n_samples, rate, state)  monty_random_exponential_mean(mean, state)  monty_random_n_exponential_mean(n_samples, mean, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from exponential distribution — monty_random_exponential_rate","text":"rate rate exponential state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream). mean mean exponential distribution (.e., 1 / rate)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from exponential distribution — monty_random_exponential_rate","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from exponential distribution — monty_random_exponential_rate","text":"","code":"state <- monty_rng_create() monty_random_exponential_rate(0.2, state) #> [1] 0.9718111 summary(monty_random_n_exponential_rate(2000, 0.2, state)) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #>  0.000614  1.327562  3.406649  4.963110  6.957489 35.318274"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a gamma distribution. There are two parameterisations here, one in terms of rate, and one in terms of scale. — monty_random_gamma_scale","title":"Sample from a gamma distribution. There are two parameterisations here, one in terms of rate, and one in terms of scale. — monty_random_gamma_scale","text":"Sample gamma distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a gamma distribution. There are two parameterisations here, one in terms of rate, and one in terms of scale. — monty_random_gamma_scale","text":"","code":"monty_random_gamma_scale(shape, scale, state)  monty_random_n_gamma_scale(n_samples, shape, scale, state)  monty_random_gamma_rate(shape, rate, state)  monty_random_n_gamma_rate(n_samples, shape, rate, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a gamma distribution. There are two parameterisations here, one in terms of rate, and one in terms of scale. — monty_random_gamma_scale","text":"shape Shape scale Scale ' state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream). rate Rate","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a gamma distribution. There are two parameterisations here, one in terms of rate, and one in terms of scale. — monty_random_gamma_scale","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_hypergeometric.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from hypergeometric distribution — monty_random_hypergeometric","title":"Sample from hypergeometric distribution — monty_random_hypergeometric","text":"Sample hypergeometric distribution.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_hypergeometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from hypergeometric distribution — monty_random_hypergeometric","text":"","code":"monty_random_hypergeometric(n1, n2, k, state)  monty_random_n_hypergeometric(n_samples, n1, n2, k, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_hypergeometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from hypergeometric distribution — monty_random_hypergeometric","text":"n1 number white balls urn (called n R's rhyper) n2 number black balls urn (called m R's rhyper) k number balls draw state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_hypergeometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from hypergeometric distribution — monty_random_hypergeometric","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_log_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from log-normal — monty_random_log_normal","title":"Sample from log-normal — monty_random_log_normal","text":"Sample log-normal distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_log_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from log-normal — monty_random_log_normal","text":"","code":"monty_random_log_normal(meanlog, sdlog, state)  monty_random_n_log_normal(n_samples, meanlog, sdlog, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_log_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from log-normal — monty_random_log_normal","text":"meanlog mean distribution log scale sdlog standard deviation distribution log scale state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_log_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from log-normal — monty_random_log_normal","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_negative_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from negative binomial distribution — monty_random_negative_binomial_prob","title":"Sample from negative binomial distribution — monty_random_negative_binomial_prob","text":"Sample negative binomial distribution. two parameterisations available: one based success probability based mean.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_negative_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from negative binomial distribution — monty_random_negative_binomial_prob","text":"","code":"monty_random_negative_binomial_prob(size, prob, state)  monty_random_n_negative_binomial_prob(n_samples, size, prob, state)  monty_random_negative_binomial_mu(size, mu, state)  monty_random_n_negative_binomial_mu(n_samples, size, mu, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_negative_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from negative binomial distribution — monty_random_negative_binomial_prob","text":"size target number successful trials (zero ) prob probability success trial (0 1) state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream). mu mean (zero )","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_negative_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from negative binomial distribution — monty_random_negative_binomial_prob","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from normal distribution — monty_random_normal","title":"Sample from normal distribution — monty_random_normal","text":"Sample normal distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from normal distribution — monty_random_normal","text":"","code":"monty_random_normal(mean, sd, state, algorithm = \"box_muller\")  monty_random_n_normal(n_samples, mean, sd, state, algorithm = \"box_muller\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from normal distribution — monty_random_normal","text":"mean mean normal distribution sd standard deviation normal distribution state random number state, monty_rng_create algorithm algorithm use normal samples; currently box_muller, polar ziggurat supported, latter considerably faster.  default may change future version. n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from normal distribution — monty_random_normal","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Poisson distribution — monty_random_poisson","title":"Sample from Poisson distribution — monty_random_poisson","text":"Sample Poisson distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Poisson distribution — monty_random_poisson","text":"","code":"monty_random_poisson(lambda, state)  monty_random_n_poisson(n_samples, lambda, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Poisson distribution — monty_random_poisson","text":"lambda mean (zero , length 1 n). valid lambda <= 10^7 state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Poisson distribution — monty_random_poisson","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_real.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Uniform(0, 1) — monty_random_real","title":"Sample from Uniform(0, 1) — monty_random_real","text":"Generate random number uniformly sampled range 0 1; basic random number functions monty algorithms composed .  Quite often, want number $[0, 1]$ (e.g., Bernoulli trial), function efficient way generating one.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_real.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Uniform(0, 1) — monty_random_real","text":"","code":"monty_random_real(state)  monty_random_n_real(n_samples, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_real.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Uniform(0, 1) — monty_random_real","text":"state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_real.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Uniform(0, 1) — monty_random_real","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_real.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from Uniform(0, 1) — monty_random_real","text":"","code":"state <- monty_rng_create() monty_random_real(state) #> [1] 0.6498534 monty_random_n_real(5, state) #> [1] 0.7836332 0.6252441 0.4862286 0.8272822 0.2704858"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_truncated_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from truncated normal — monty_random_truncated_normal","title":"Sample from truncated normal — monty_random_truncated_normal","text":"Sample truncated normal distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_truncated_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from truncated normal — monty_random_truncated_normal","text":"","code":"monty_random_truncated_normal(mean, sd, min, max, state)  monty_random_n_truncated_normal(n_samples, mean, sd, min, max, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_truncated_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from truncated normal — monty_random_truncated_normal","text":"mean mean parent (untruncated) normal distribution (necessarily mean truncated distribution, unless min max symmetrically placed around mean) sd standard deviation parent distribution (standard deviation truncated distribution finite bounds). min lower bound (can -Inf). max upper bound (can Inf). state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_truncated_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from truncated normal — monty_random_truncated_normal","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from uniform distribution — monty_random_uniform","title":"Sample from uniform distribution — monty_random_uniform","text":"Sample uniform distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from uniform distribution — monty_random_uniform","text":"","code":"monty_random_uniform(min, max, state)  monty_random_n_uniform(n_samples, min, max, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from uniform distribution — monty_random_uniform","text":"min minimum value uniform distribution max maximum value uniform distribution state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from uniform distribution — monty_random_uniform","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Weibull — monty_random_weibull","title":"Sample from Weibull — monty_random_weibull","text":"Sample Weibull distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Weibull — monty_random_weibull","text":"","code":"monty_random_weibull(shape, scale, state)  monty_random_n_weibull(n_samples, shape, scale, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Weibull — monty_random_weibull","text":"shape Shape scale Scale state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Weibull — monty_random_weibull","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_negative_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from zero-inflated negative binomial distribution — monty_random_zi_negative_binomial_prob","title":"Sample from zero-inflated negative binomial distribution — monty_random_zi_negative_binomial_prob","text":"Sample zero-inflated negative binomial distribution. probability pi0 0 drawn, otherwise draws corresponding standard negative binomial distribution (may also result 0 drawn). standard negative binomial distribution, two parameterisations available, based either success probability mean negative binomial part distribution.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_negative_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from zero-inflated negative binomial distribution — monty_random_zi_negative_binomial_prob","text":"","code":"monty_random_zi_negative_binomial_prob(pi0, size, prob, state)  monty_random_n_zi_negative_binomial_prob(n_samples, pi0, size, prob, state)  monty_random_zi_negative_binomial_mu(pi0, size, mu, state)  monty_random_n_zi_negative_binomial_mu(n_samples, pi0, size, mu, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_negative_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from zero-inflated negative binomial distribution — monty_random_zi_negative_binomial_prob","text":"pi0 probability excess zeros size target number successful trials (zero ) prob probability success trial (0 1) state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream). mu mean (zero ) negative binomial part distribution. Note mean zero-inflated negative binomial distribution actually (1 - pi0) * mu","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_negative_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from zero-inflated negative binomial distribution — monty_random_zi_negative_binomial_prob","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from zero-inflated Poisson distribution — monty_random_zi_poisson","title":"Sample from zero-inflated Poisson distribution — monty_random_zi_poisson","text":"Sample zero-inflated Poisson distribution. probability pi0 0 drawn, otherwise draws corresponding standard Poisson distribution (may also result 0 drawn).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from zero-inflated Poisson distribution — monty_random_zi_poisson","text":"","code":"monty_random_zi_poisson(pi0, lambda, state)  monty_random_n_zi_poisson(n_samples, pi0, lambda, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from zero-inflated Poisson distribution — monty_random_zi_poisson","text":"pi0 probability extra zeros lambda mean (zero , length 1 n) Poisson part distribution. valid lambda <= 10^7. Note mean zero-inflated Poisson distribution actually (1 - pi0) * lambda state random number state, monty_rng_create n_samples number samples take, per stream. using multiple-sample interface, parameters held constant (per stream).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_random_zi_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from zero-inflated Poisson distribution — monty_random_zi_poisson","text":"vector random numbers, length number streams state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a monty random number generator — monty_rng_create","title":"Create a monty random number generator — monty_rng_create","text":"Create monty random number generator.  allows sample random numbers random number algorithms monty provides via C++ dust2, uses within samplers filters.  function creates internal state, passed actual generation functions monty_random_*, monty_random_real().","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a monty random number generator — monty_rng_create","text":"","code":"monty_rng_create(   n_streams = 1L,   seed = NULL,   n_threads = 1L,   deterministic = FALSE,   preserve_stream_dimension = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a monty random number generator — monty_rng_create","text":"n_streams number streams create (see Details) seed initial seed random number generator.  can NULL, case seed generator R's random number state (meaning respond set.seed one expect).  Alternatively, can provide integer , used sparingly primarily testing. n_threads number threads use, OpenMP enabled. deterministic Logical, indicating use \"deterministic\" mode distributions return expectations state never changed. preserve_stream_dimension Logical, indicating stream dimension preserved case n_streams 1 multiple-sample functions used.  Set TRUE ensure rank result change number streams (see Details).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a monty random number generator — monty_rng_create","text":"object class monty_rng_state, can passed state argument random-number producing functions, monty_random_real","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a monty random number generator — monty_rng_create","text":"Monty's random number generation different base R.  concept \"streams\" random numbers, generator 1 many streams.  stream statistically independent, can sampled simultaneously.  use random number functions R, draw one number per stream. random number state can multiple streams, return vector, separate set functions multiple numbers requested per stream; prefixed monty_random_n_ (e.g., monty_random_n_real()).  return matrix used multiple streams, column representing stream.  single stream set preserve_stream_dimension FALSE drop dimension return matrix.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a monty random number generator — monty_rng_create","text":"","code":"state <- monty_rng_create() state #>  #> ── <monty_rng_state> ─────────────────────────────────────────────────────────── #> • 1 random number stream #> • 1 execution thread  monty_random_real(state) #> [1] 0.05586274"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_jump.html","id":null,"dir":"Reference","previous_headings":"","what":"Jump random number state — monty_rng_jump","title":"Jump random number state — monty_rng_jump","text":"Jump random number state.  two \"lengths\" jumps; normal jump long jump.  normal jump distance streams within random number state, multi-stream rng shifts states left.  long jump used create distributed states.  properly explain interface stabilises.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_jump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jump random number state — monty_rng_jump","text":"","code":"monty_rng_jump(state, n = 1)  monty_rng_long_jump(state, n = 1)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_jump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jump random number state — monty_rng_jump","text":"state Either monty_rng_state object (created via monty_rng_create) raw vector suitable creating one. n number jumps take (integer, 1 )","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_jump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jump random number state — monty_rng_jump","text":"monty_rng_state object (invisibly, modified place) raw vector, matching input argument state (visibly).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set random number state — monty_rng_state","title":"Get and set random number state — monty_rng_state","text":"Get set internal random number state","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set random number state — monty_rng_state","text":"","code":"monty_rng_state(state)  monty_rng_set_state(value, state)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set random number state — monty_rng_state","text":"state random number state, monty_rng_create value vector raw values, typically result exporting random state monty_rng_state()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set random number state — monty_rng_state","text":"vector raws","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set random number state — monty_rng_state","text":"","code":"s1 <- monty_rng_create() r1 <- monty_rng_state(s1)  s2 <- monty_rng_create(seed = r1) identical(r1, monty_rng_state(s2)) #> [1] TRUE monty_random_real(s1) #> [1] 0.3854807 monty_random_real(s2) #> [1] 0.3854807  monty_rng_set_state(r1, s1) monty_random_real(s1) #> [1] 0.3854807 monty_random_real(s1) #> [1] 0.05921009 monty_random_real(s2) #> [1] 0.05921009"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chains in parallel with callr — monty_runner_callr","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"Run MCMC chains parallel (time).  runner uses callr package distribute chains number worker processes machine.  used mcstate, \"worker\" processes.  Unless chains take seconds run, slower running default serial runner (monty_runner_serial), however long running chains, speed-typically scale workers added, long chains divide neatly workers.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"","code":"monty_runner_callr(n_workers, progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"n_workers number workers use.  larger number chains (though harmless) larger total number cores available computer.  Ideally number chains want run multiple number (example, 8 chains, 1, 2, 4, 8 good choices n_workers, 7 workers likely faster 4). progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chain in parallel — monty_runner_parallel","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"Run MCMC chains parallel (time).  runner uses parallel package distribute chains number worker processes machine.  Compared monty_runner_callr (similar \"worker\" support mcstate version 1), simple.  particular report back information progress chain running worker even across chains.  also support warn number chains neatly divide number workers.  Mostly exists proof concept us think different interfaces.  Unless chains quite slow, parallel runner slower serial runner (monty_runner_serial) due overhead cost starting cluster.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"","code":"monty_runner_parallel(n_workers)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"n_workers Number workers create cluster .  multi-user setting careful set cores allowed use.  can use parallel::detectCores() get estimate number cores single user system (often overestimate returns number logical cores, including \"hyperthreading\"). Fewer cores used run fewer chains workers.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chain in series — monty_runner_serial","title":"Run MCMC chain in series — monty_runner_serial","text":"Run MCMC chains series (one another).  simplest chain runner, default used monty_sample(). nothing can configured (yet).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chain in series — monty_runner_serial","text":"","code":"monty_runner_serial(progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chain in series — monty_runner_serial","text":"progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chain in series — monty_runner_serial","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chains simultaneously — monty_runner_simultaneous","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"Run chains simultaneously.  differs monty_runner_parallel, runs chains individually parallel working models can evaluate multiple densities time.  situations might faster running parallel, primarily exists can see samplers can work multiple samples .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"","code":"monty_runner_simultaneous(progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"","code":"m <- monty_example(\"banana\") s <- monty_sampler_random_walk(vcv = diag(2) * 0.01) r <- monty_runner_simultaneous() samples <- monty_sample(m, s, 200, runner = r) #> ⡀⠀ Sampling  ■                                |   0% ETA:  1s #> ✔ Sampled 200 steps across 1 chain in 20ms #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a model — monty_sample","title":"Sample from a model — monty_sample","text":"Sample model.  Uses Monte Carlo method (possibly something else future) generate samples distribution.  going change lot future, add support distributing workers, things like parallel reproducible streams random numbers.  now just runs single chain proof concept.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a model — monty_sample","text":"","code":"monty_sample(   model,   sampler,   n_steps,   initial = NULL,   n_chains = 1L,   runner = NULL,   restartable = FALSE,   burnin = NULL,   thinning_factor = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a model — monty_sample","text":"model model sample ; monty_model now, might change future test see things match interface rather particular class attribute. sampler sampler use.  described later, hope make reasonably easy implement can try different sampling ideas.  now, sampler implemented monty_sampler_random_walk(). n_steps number steps run sampler . initial Optionally, initial parameter values sampling.  given, sample model (prior).  Alternatively, can provide monty_samples object – result previous call function – sample starting points final portion chains (exact details subject change, sample last 20 points 5% chain, ever smaller, replacement, pooled across chains previous sample). n_chains Number chains run.  default run single chain, likely want run . runner runner chains.  default option run chains series (via monty_runner_serial).  current option monty_runner_parallel uses parallel package run chains parallel.  run one chain argument best left alone. restartable Logical, indicating chains restartable.  add additional data chains object. burnin Number steps discard burnin.  affects recording steps chains run; record first burnin steps.  Generally want post-processing monty_samples_thin() data discarded chance getting back.  However, observation process creates large amount data, may prefer apply burnin reduce much memory used. thinning_factor thinning factor apply chain running.  given, save every thinning_factor'th step.  thinning_factor = 2 save every second step, 10, save every 10th.  Like burnin , preferable apply post processing monty_samples_thin().  However, slow-mixing chains large observer output can use reduce memory usage.  Use thinning_factor requires n_steps even multiple thinning_factor; thinning_factor 10, n_steps must multiple 10.  ensures last step sample.  thinning factor changed continuing chain.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a model — monty_sample","text":"list parameters densities.  provide conversion formats used packages, notably posterior::as_draws_array, posterior::as_draws_df coda::.mcmc.list; please let us know need conversion something else.  want work directly output, elements list include: pars: array three dimensions representing (turn) parameter, sample chain, pars[, j, k] ith parameter jth sample kth chain.  rows named names parameters, model. density: matrix model log densities, n_steps rows n_chains columns. initial: record initial conditions, matrix many rows parameters n_chains columns (format matrix form initial input parameter) details: Additional details reported sampler; list length n_chains (NULL) details depend sampler.  one subject change. observations: Additional details reported model.  one also subject change.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from a model — monty_sample","text":"","code":"m <- monty_example(\"banana\") s <- monty_sampler_hmc(epsilon = 0.1, n_integration_steps = 10) samples <- monty_sample(m, s, 2000)  # Quick conversion of parameters into something plottable: pars <- t(drop(samples$pars)) plot(pars, pch = 19, cex = 0.75, col = \"#0000ff55\")   # If you have the posterior package you might prefer converting to # its format for performing diagnoses: res <- posterior::as_draws_df(samples) posterior::summarise_draws(res) #> # A tibble: 2 × 10 #>   variable    mean  median    sd   mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>      <dbl>   <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 alpha     0.934   0.604  1.37  0.931 -0.534  3.65  1.01     238.     154. #> 2 beta     -0.0349 -0.0404 0.975 0.944 -1.65   1.61  1.03     110.     137.  # At this point you could also use the 'bayesplot' package to plot # diagnostics."},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue sampling — monty_sample_continue","title":"Continue sampling — monty_sample_continue","text":"Continue (restart) chains started monty_sample.  Requires original chains run restartable = TRUE. Running chains way result final state exactly running total (original + continued) number steps single push.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue sampling — monty_sample_continue","text":"","code":"monty_sample_continue(   samples,   n_steps,   restartable = FALSE,   runner = NULL,   append = TRUE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue sampling — monty_sample_continue","text":"samples monty_samples object created monty_sample() n_steps number new steps run restartable Logical, indicating chains restartable.  add additional data chains object. runner Optionally, runner chains.  default continue backend used start chains via monty_sample (previous restart function).  can use argument change runner, might useful transferring pilot run high-resource environment lower-resource environment.  given, must monty_runner object monty_runner_serial monty_runner_parallel.  can use argument change configuration runner, well type runner (e.g., changing number allocated cores). append Logical, indicating append results resumed chain together original chain.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue sampling — monty_sample_continue","text":"list parameters densities","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up samples — monty_sample_manual_cleanup","title":"Clean up samples — monty_sample_manual_cleanup","text":"Clean manual sampling.  essentially safe version deleting directory (e.g, unlink(path, recursive = TRUE)) checks directory really used sampling contain anything else unexpected.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up samples — monty_sample_manual_cleanup","text":"","code":"monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up samples — monty_sample_manual_cleanup","text":"path path used call monty_sample_manual_prepare","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up samples — monty_sample_manual_cleanup","text":"Nothing, called side effects .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up samples — monty_sample_manual_cleanup","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec39dbcb20 ─────────────────── #> ℹ Created 2025-10-01 07:20:24 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec39dbcb20 ─────────────────── #> ℹ Created 2025-10-01 07:20:24 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect manually run samples — monty_sample_manual_collect","title":"Collect manually run samples — monty_sample_manual_collect","text":"Collect samples chains run monty_sample_manual_prepare monty_sample_manual_run.  chain completed, error.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect manually run samples — monty_sample_manual_collect","text":"","code":"monty_sample_manual_collect(   path,   samples = NULL,   restartable = FALSE,   append = TRUE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect manually run samples — monty_sample_manual_collect","text":"path path used call monty_sample_manual_prepare samples Samples parent run.  need provide save_samples set anything \"value\" restartable Logical, indicating chains restartable.  add additional data chains object.  Note controlled chain collection creation. append Logical, indicating append results resumed chain together original chain.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect manually run samples — monty_sample_manual_collect","text":"monty_samples object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect manually run samples — monty_sample_manual_collect","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec552645f8 ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec552645f8 ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about manually scheduled samples — monty_sample_manual_info","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"Get information status manually scheduled samples.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"","code":"monty_sample_manual_info(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"path path used call monty_sample_manual_prepare","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"Invisibly, logical vector, TRUE completed chains FALSE incomplete chains.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec2ac13b6b ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) #> ⡀⠀ Sampling  ■                                |   1% ETA:  0s #> ✔ Sampled 100 steps across 1 chain in 20ms #>  monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec2ac13b6b ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"Run MCMC, schedule execution chains .  Use want distribute chains (say) nodes HPC system.  arguments monty_sample, except runner argument missing looking .  using function, generally wanting run monty_sample_manual_run monty_sample_manual_collect.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"","code":"monty_sample_manual_prepare(   model,   sampler,   n_steps,   path,   initial = NULL,   n_chains = 1L,   burnin = NULL,   thinning_factor = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"model model sample ; monty_model now, might change future test see things match interface rather particular class attribute. sampler sampler use.  described later, hope make reasonably easy implement can try different sampling ideas.  now, sampler implemented monty_sampler_random_walk(). n_steps number steps run sampler . path path write inputs outputs .  path directory yet exist, empty; create one .  contents directory managed monty names contents files implementation detail relied . Calling monty_sample_manual_cleanup() delete directory entirety.  aware use tempfile() (can reasonable choice!) path deleted R process ends, using process calling monty_sample_manual_prepare outlive running sampling. initial Optionally, initial parameter values sampling.  given, sample model (prior).  Alternatively, can provide monty_samples object – result previous call function – sample starting points final portion chains (exact details subject change, sample last 20 points 5% chain, ever smaller, replacement, pooled across chains previous sample). n_chains Number chains run.  default run single chain, likely want run . burnin Number steps discard burnin.  affects recording steps chains run; record first burnin steps.  Generally want post-processing monty_samples_thin() data discarded chance getting back.  However, observation process creates large amount data, may prefer apply burnin reduce much memory used. thinning_factor thinning factor apply chain running.  given, save every thinning_factor'th step.  thinning_factor = 2 save every second step, 10, save every 10th.  Like burnin , preferable apply post processing monty_samples_thin().  However, slow-mixing chains large observer output can use reduce memory usage.  Use thinning_factor requires n_steps even multiple thinning_factor; thinning_factor 10, n_steps must multiple 10.  ensures last step sample.  thinning factor changed continuing chain.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"Invisibly, path used store files (value path argument)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"contrast monty_sample runner argument , using function directly taking responsibility runner. ways running set chains monty, expected using monty_sample_manual_* result samples generated used monty_sample runner choice.","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec6e476fdb ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec6e476fdb ─────────────────── #> ℹ Created 2025-10-01 07:20:25 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"Prepare continue sampling model, manual chain orchestration.  function monty_sample_continue monty_sample_manual_prepare monty_sample.  original set samples need run manually.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"","code":"monty_sample_manual_prepare_continue(   samples,   n_steps,   path,   save_samples = \"hash\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"samples monty_samples object created monty_sample() n_steps number steps run sampler . path path write inputs outputs .  path directory yet exist, empty; create one .  contents directory managed monty names contents files implementation detail relied . Calling monty_sample_manual_cleanup() delete directory entirety.  aware use tempfile() (can reasonable choice!) path deleted R process ends, using process calling monty_sample_manual_prepare outlive running sampling. save_samples Control saving samples inputs. choices hash (default) save hash validate monty_sample_manual_collect, value samples saved can omit samples  argument monty_sample_manual_collect, nothing, save nothing, just get right.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"Invisibly, path used store files (value path argument)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run sample with manual scheduling — monty_sample_manual_run","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"Run chain prepared using monty_sample_manual_prepare.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"","code":"monty_sample_manual_run(chain_id, path, progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"chain_id id chain run, integer.  provide integer correspond chain 1 n_chains (n_chains argument passed monty_sample_manual_prepare error. path path used call monty_sample_manual_prepare progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"warning-","dir":"Reference","previous_headings":"","what":"Warning:","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"lock mechanism; can start single chain many times.  .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec35198833 ─────────────────── #> ℹ Created 2025-10-01 07:20:26 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/Rtmpym8Z0B/file1dec35198833 ─────────────────── #> ℹ Created 2025-10-01 07:20:26 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a monty sampler — monty_sampler","title":"Create a monty sampler — monty_sampler","text":"monty_sampler object can passed monty_sample order draw samples distribution.  primary role sampler advance state Markov chain one step; may mutate internal state (outside knowledge problem advanced).  Ordinarily users call function, authors samplers call constructor sampler.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a monty sampler — monty_sampler","text":"","code":"monty_sampler(   name,   help,   control,   initialise,   step,   state_dump = NULL,   state_combine = NULL,   state_restore = NULL,   state_details = NULL,   properties = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a monty sampler — monty_sampler","text":"name Name sampler. Usually name algorithm can include spaces punctuation desired. help Name function direct users find help. Usually name constructor function. control list control parameters passed sampler. immutable (.e., created changed). initialise function initialise sampler.  called start chain set internal state, though cases need much. must take arguments: state_chain: state MCMC chain, containing elements pars (vector matrix parameters), density possibly observation control: control parameters, originally passed monty_sampler model: model sampled random number generator state, sampler may draw . Return NULL sampler stateless, otherwise return environment (e.g., created new.env(parent = emptyenv()) state updated iteration.  can store whatever convenient , example random walk sampler might store eigendecomposition variance covariance matrix used proposal . step workhorse function sampler, propagating state (pair (parameters, density)) forward one step chain. Typically, always, include proposal, evaluation density, acceptance. must take arguments: state_chain: state MCMC chain () state_sampler: state sampler, passed back init.  sampler stateless NULL, otherwise environment modify reference. control: Sampler control parameters () model: model () rng: random number state, can use step () Return state_chain, updated acceptance. state_dump Optionally, function prepare chain state serialisation.  given, assume nothing needs saved sampler can restarted just state chain, model control.  provided typically need provide state_restore, . state_combine Optionally, function combine output several chains (list, element come state_dump) single object consistent simultaneous runner produced. state_restore Optionally, function take dumped chain state convert back environment.  given, assume list2env(x, parent = emptyenv()) sufficient use (unless state NULL, case use identity).  provided typically need provide state_dump, .  arguments , provided, must chain_id state_chain state_sampler control model state_details Optionally, function tidy internal state saved end run.  provide almost certainly need provide state_dump state_restore.  takes combined state argument. properties Optionally, monty_sampler_properties object advertises sampler can requires models draws samples .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a monty sampler — monty_sampler","text":"monty_sampler object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a monty sampler — monty_sampler","text":"See vignette(\"writing-samplers\") introduction writing samplers. Control parameters used build sampler.  immutable creation.  format unspecified monty_sampler typically named list.  sampler designer construct list take care include anything mutable (e.g. environments) hard serialise transfer another process .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler.html","id":"sampler-state","dir":"Reference","previous_headings":"","what":"Sampler state","title":"Create a monty sampler — monty_sampler","text":"sampler can internal state.  needed simple samplers; random walk Metropolis-Hastings sampler need example state entirely defined (pars, density) pair forms chain state.  Similarly, simple implementations HMC Gibbs samplers need functionality.  wish record debug information, sampler updates internal state runs – adaptive Metropolis-Hastings sampler – need configure sampler initialise, store, combine restore state. four state handling functions.  provide one, probably need provide , though details can omitted want render user-facing summary sampler state end chain. state_dump: takes sampler state (often environment) returns list.  cases, single chain, sampler used monty_runner_simultaneous() correspond state number chains , case dumped state look like output combining chains. state_combine: takes list sampler states, dumped state_dump combines single state object.  need aim case output function running state_dump running monty_runner_simultaneous().  Hopefully can write things help , least example tests probably satisfy . state_restore: takes output state_split (state_combine case monty_runner_simultaneous()) prepares state use sampler.  function takes arguments: chain_id: one chain ids state_chain: state chain(s) point restoration state_sampler: state state_combine control: sampler control model: model state_details: takes output state_combine returns cleaned version state back user, $details element final samples.  Use extract fraction total state user-visible.  need provide , default return nothing. State initialisation handled initialise; however, non-trivial return value function imply sampler needs worry much state.  can entirely construct current state chain control parameters, state management required. However, non-trivial return value initialise requires state_restore argument, even state_dump present. state manoeuvres may feel tedious, form part core Parallel Tempering algorithm works, need able run multiple chains sampler time. set things soon provide functions (provide state), sampler work, fail informatively try continue .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"Create adaptive Metropolis-Hastings sampler, tune variance covariance matrix (vs simple random walk sampler monty_sampler_random_walk).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"","code":"monty_sampler_adaptive(   initial_vcv,   initial_vcv_weight = 1000,   initial_scaling = 1,   initial_scaling_weight = NULL,   min_scaling = 0,   scaling_increment = NULL,   log_scaling_update = TRUE,   acceptance_target = 0.234,   forget_rate = 0.2,   forget_end = Inf,   adapt_end = Inf,   pre_diminish = 0,   boundaries = \"reflect\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"initial_vcv initial variance covariance matrix; start using proposal, gradually become weighted towards empirical covariance matrix calculated chain. initial_vcv_weight Weight initial variance-covariance matrix used build proposal random-walk. Higher values translate higher confidence initial variance-covariance matrix means update additional samples slower. initial_scaling initial scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. generate proposal matrix, weighted variance covariance matrix multiplied scaling parameter squared times 2.38^2 / n_pars (n_pars number fitted parameters). Thus, Gaussian target parameter space, optimal scaling around 1. initial_scaling_weight initial weight used scaling update. scaling weight increase first pre_diminish iterations, scaling weight increases adaptation scaling diminishes. NULL (default) value 5 / (acceptance_target * (1 - acceptance_target)). min_scaling minimum scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. scaling_increment scaling increment added subtracted scaling factor variance-covariance adaptive step. NULL (default) optimal value calculated. log_scaling_update Logical, whether changes scaling parameter made log-scale. acceptance_target target fraction proposals accepted (optimally) adaptive part chain. forget_rate rate forgetting early parameter sets empirical variance-covariance matrix MCMC chains. example, forget_rate = 0.2 (default) means every 5th iterations remove earliest parameter set included, remove 1st parameter set 5th update, 2nd 10th update, . Setting forget_rate = 0 means early parameter sets never forgotten. forget_end final iteration early parameter sets can forgotten. Setting forget_rate = Inf (default) means forgetting mechanism continues throughout chains. Forgetting early parameter sets becomes less useful chains settled posterior mode, parameter might set estimate long take. adapt_end final iteration can adapt multivariate normal proposal. Thereafter empirical variance-covariance matrix, scaling weight remain fixed. allows adaptation switched certain point help ensure convergence chain. pre_diminish number updates adaptation scaling parameter starts diminish. Setting pre_diminish = 0 means diminishing adaptation scaling parameter offset, pre_diminish = Inf mean never diminishing adaptation. Diminishing adaptation help scaling parameter converge better, chains find location scale posterior mode might useful explore switched . boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"Efficient exploration parameter space MCMC might difficult target distribution high dimensionality, especially target probability distribution present high degree correlation.  Adaptive schemes used \"learn\" fly correlation structure updating proposal distribution recalculating empirical variance-covariance matrix rescale adaptive step MCMC. implementation adaptive MCMC algorithm based adaptation \"accelerated shaping\" algorithm Spencer (2021). algorithm based random-walk Metropolis-Hastings algorithm proposal multi-variate Normal distribution centred current point. Spencer SEF (2021) Accelerating adaptation adaptive Metropolis–Hastings random walk algorithm. Australian & New Zealand Journal Statistics 63:468-484.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"","code":"m <- monty_example(\"gaussian\", matrix(c(1, 0.5, 0.5, 2), 2, 2)) vcv <- diag(2) * 0.1  # Sampling with a random walk s_rw <- monty_sampler_random_walk(vcv) res_rw <- monty_sample(m, s_rw, 1000)  s_adapt <- monty_sampler_adaptive(vcv) res_adapt <- monty_sample(m, s_adapt, 1000)  plot(drop(res_adapt$density), type = \"l\", col = 4) lines(drop(res_rw$density), type = \"l\", col = 2)   # Estimated vcv from the sampler at the end of the simulation res_adapt$details$vcv[, , 1] #>           [,1]      [,2] #> [1,] 0.9796634 0.5684494 #> [2,] 0.5684494 2.1373297  coda::effectiveSize(coda::as.mcmc.list(res_rw)) #>        a        b  #> 15.78359 12.23825  coda::effectiveSize(coda::as.mcmc.list(res_adapt)) #>         a         b  #> 122.10833  89.26287"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create HMC — monty_sampler_hmc","title":"Create HMC — monty_sampler_hmc","text":"Create Hamiltonian Monte Carlo sampler, implemented using leapfrog algorithm.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create HMC — monty_sampler_hmc","text":"","code":"monty_sampler_hmc(   epsilon = 0.015,   n_integration_steps = 10,   vcv = NULL,   debug = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create HMC — monty_sampler_hmc","text":"epsilon step size HMC steps n_integration_steps number HMC steps per step vcv variance-covariance matrix momentum vector. default uses identity matrix. debug Logical, indicating save intermediate points gradients.  add vector \"history\" details integration.  slow things though accumulate history inefficiently.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create HMC — monty_sampler_hmc","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"Create \"parallel tempering\" sampler, runs multiple chains try improve mixing, takes advantage vectorisation/parallelisation underlying model supports .  tested implementation random walk sampler (monty_sampler_random_walk) may work samplers.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"","code":"monty_sampler_parallel_tempering(   sampler,   n_rungs = NULL,   beta = NULL,   base = NULL )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"sampler sampler use underlying chains.  might use something like monty_sampler_random_walk(vcv) random walk sampler embedded parallel tempering scheme. n_rungs number extra chains run, must least 1.  run total n_rungs + 1 chains, one target distribution one direct sample base model (often prior). beta vector beta values.  provided, n_rungs provided, beta vector least length 2, first value 1, last value 0 values form strictly decreasing sequence (.e., increases, ties). base optional base model, must provided model automatically decomposed prior + posterior using monty_model_split, using within Bayesian context want use alternative easy--sample-reference distribution.  require model can directly sampled , accepts multiple parameters (matrix), deterministic assume cheap compute (relative target).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"implement sampler based https://doi.org/10.1111/rssb.12464","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"efficiency-of-the-sampler","dir":"Reference","previous_headings":"","what":"Efficiency of the sampler","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"parallel tempering sampler runs series chains time, much work simpler sampler.  run n_rungs = 10 11x work underlying base sampler, want make sure paid back somewhere.  places efficiency may come : model parallelisable.  underlying model can run efficiently parallel may take much longer \"wall time\" run extra copies calculations.  case, still using much CPU time able take advantage extra cores get effective sampling parallel tempering sampler mixes better underlying sampler. model vectorised.  model implemented R vectorises density calculations generally take much longer compute many densities single one. density multimodal.  density distinct peaks, samplers struggle explore well, even non-parallelised, non-vectorised sampler parallel tempering sampler explore space efficiently.  limit, normal sampler may explore single peak model many peaks never mix properly.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_parallel_tempering.html","id":"tuning-the-beta-values","dir":"Reference","previous_headings":"","what":"Tuning the beta values","title":"Parallel Tempering Sampler — monty_sampler_parallel_tempering","text":"argument beta controls spacing temperature among chains.  Ideally, set adjacent chains probability swapping, generally means beta values equidistant.  Creating appropriate vector betas (\"annealing schedule\") requires running pilot run, computing new beta values, running another (new) chain new beta values, repeating iteration times beta values stabilise. Rumour , take iterations. updated values beta stored details samples running.  set samples called s, s$details$beta contain new beta values can use next run. important concatenate chains computed different beta values generally represent samples target distribution (extreme case, consider one set beta values never accept swaps onto target distribution another always ; obviously concatenate ).  Therefore, every time change beta values start new chain.  can monty_sample_continue long pass append = FALSE.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe sampler properties — monty_sampler_properties","title":"Describe sampler properties — monty_sampler_properties","text":"Describe properties sampler.  used monty_sampler advertise sampler state, requires runner model, monty can ensure used appropriate.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe sampler properties — monty_sampler_properties","text":"","code":"monty_sampler_properties(   has_state = NULL,   restartable = NULL,   allow_multiple_parameters = FALSE,   requires_gradient = FALSE,   requires_allow_multiple_parameters = FALSE,   requires_deterministic = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe sampler properties — monty_sampler_properties","text":"has_state Optional logical, indicating sampler state.  optional presence state function state_dump implies . restartable Optional logical, indicating sampler can restarted.  FALSE, users use restartable = TRUE monty_sample() (therefore use monty_continue).  optional presence state function state_restore implies . allow_multiple_parameters Logical, indicating sampler can accept matrix parameters order run multiple chains (e.g., monty_runner_simultaneous runner, part parallel tempering scheme monty_sampler_parallel_tempering). requires_gradient Logical, indicating model must provide gradient order used sampler. requires_allow_multiple_parameters Logical, indicating model must able accept multiple parameters.  different allow_multiple_parameters, concerns sampler able process multiple parameter sets . example, monty_sampler_parallel_tempering sets allow_multiple_parameters FALSE requires_allow_multiple_parameters TRUE, monty_sampler_random_walk sets opposite! requires_deterministic Logical, indicating model must deterministic order used sampler.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe sampler properties — monty_sampler_properties","text":"monty_sampler_properties object, modified.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe sampler properties — monty_sampler_properties","text":"","code":"monty_sampler_properties() #>  #> ── <monty_sampler_properties> ────────────────────────────────────────────────── #> • allow_multiple_parameters: `FALSE` #> • requires_gradient: `FALSE` #> • requires_allow_multiple_parameters: `FALSE` #> • requires_deterministic: `FALSE` #> ℹ Unset: 'restartable' and 'has_state'"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Walk Sampler — monty_sampler_random_walk","title":"Random Walk Sampler — monty_sampler_random_walk","text":"Create simple random walk sampler, uses symmetric proposal move around parameter space.  sampler supports sampling models likelihood computable randomly (e.g., pmcmc).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Walk Sampler — monty_sampler_random_walk","text":"","code":"monty_sampler_random_walk(   vcv,   boundaries = \"reflect\",   rerun_every = Inf,   rerun_random = TRUE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Walk Sampler — monty_sampler_random_walk","text":"vcv variance covariance matrix proposal. boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample. rerun_every Optional integer giving frequency rerun model current \"accepted\" parameters obtain new density stochastic models.  default (Inf) never trigger rerun, set 100, every 100 steps run model proposed previously accepted parameters comparison.  may help \"unstick\" chains, cost bias results. rerun_random Logical, controlling behaviour rerunning (rerun_every finite). default value TRUE, stochastically rerun step probability 1 / rerun_every. FALSE rerun model fixed intervals iterations (given rerun_every). two methods give expected number MCMC steps reruns different pattern.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Walk Sampler — monty_sampler_random_walk","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_samples_thin.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin samples — monty_samples_thin","title":"Thin samples — monty_samples_thin","text":"Thin results running monty_sample(), reducing autocorrelation samples saving space. function may useful running onward simulations, saving output disk.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_samples_thin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin samples — monty_samples_thin","text":"","code":"monty_samples_thin(samples, thinning_factor = NULL, burnin = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_samples_thin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin samples — monty_samples_thin","text":"samples monty_samples object, running monty_sample() thinning_factor Optional integer thinning factor. given, save every thinning_factor'th step.  thinning_factor = 2 save every second step, 10, save every 10th.  always include last point chain, exclude points counting backwards. burnin Number steps discard burnin start chain.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_samples_thin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin samples — monty_samples_thin","text":"monty_samples object (monty_sample()), typically fewer samples.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_samples_thin.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Thin samples — monty_samples_thin","text":"Subsetting parameters ($pars) density ($density) easy enough, main use function subsetting chains observations, otherwise simply cast samples_df use functions posterior package. can subset observations observer able tidy nice array us.  typically case (example using odin/dust, trajectories nice array). specifically, array \"nice\" last two dimensions represent samples chains; case subset along samples dimension leave everything else alone.  element $observations subsetted, issue warning. generally subset \"details\", pass along unmodified.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace random number calls — with_trace_random","title":"Trace random number calls — with_trace_random","text":"Trace calls R's random-number-generating functions, detect unexpected use random number generation outside monty's control.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace random number calls — with_trace_random","text":"","code":"with_trace_random(code, max_calls = 5, show_stack = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace random number calls — with_trace_random","text":"code Code run tracing max_calls Maximum number calls report.  default 5 show_stack Logical, indicating show stack point call","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace random number calls — with_trace_random","text":"result evaluating code","code":""}]
