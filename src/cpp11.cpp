// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// random.cpp
SEXP monty_rng_alloc(cpp11::sexp r_seed, int n_streams, bool deterministic);
extern "C" SEXP _monty_monty_rng_alloc(SEXP r_seed, SEXP n_streams, SEXP deterministic) {
  BEGIN_CPP11
    return cpp11::as_sexp(monty_rng_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<int>>(n_streams), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic)));
  END_CPP11
}
// random.cpp
cpp11::sexp cpp_monty_rng_state(cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_rng_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_rng_state(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
void cpp_monty_rng_set_state(cpp11::sexp ptr, cpp11::raws r_value);
extern "C" SEXP _monty_cpp_monty_rng_set_state(SEXP ptr, SEXP r_value) {
  BEGIN_CPP11
    cpp_monty_rng_set_state(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(r_value));
    return R_NilValue;
  END_CPP11
}
// random.cpp
void cpp_monty_rng_jump(cpp11::sexp ptr, int n);
extern "C" SEXP _monty_cpp_monty_rng_jump(SEXP ptr, SEXP n) {
  BEGIN_CPP11
    cpp_monty_rng_jump(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n));
    return R_NilValue;
  END_CPP11
}
// random.cpp
void cpp_monty_rng_long_jump(cpp11::sexp ptr, int n);
extern "C" SEXP _monty_cpp_monty_rng_long_jump(SEXP ptr, SEXP n) {
  BEGIN_CPP11
    cpp_monty_rng_long_jump(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n));
    return R_NilValue;
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_real(cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_real(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_real(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_real(size_t n_samples, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_real(SEXP n_samples, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_real(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_exponential_rate(cpp11::doubles rate, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_exponential_rate(SEXP rate, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_exponential_rate(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rate), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_exponential_rate(size_t n_samples, cpp11::doubles rate, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_exponential_rate(SEXP n_samples, SEXP rate, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_exponential_rate(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rate), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_exponential_mean(cpp11::doubles mean, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_exponential_mean(SEXP mean, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_exponential_mean(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_exponential_mean(size_t n_samples, cpp11::doubles mean, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_exponential_mean(SEXP n_samples, SEXP mean, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_exponential_mean(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_poisson(cpp11::doubles lambda, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_poisson(SEXP lambda, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_poisson(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_poisson(size_t n_samples, cpp11::doubles lambda, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_poisson(SEXP n_samples, SEXP lambda, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_poisson(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_beta(cpp11::doubles a, cpp11::doubles b, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_beta(SEXP a, SEXP b, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_beta(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(a), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(b), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_beta(size_t n_samples, cpp11::doubles a, cpp11::doubles b, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_beta(SEXP n_samples, SEXP a, SEXP b, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_beta(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(a), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(b), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_binomial(cpp11::doubles size, cpp11::doubles prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_binomial(SEXP size, SEXP prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_binomial(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_binomial(size_t n_samples, cpp11::doubles size, cpp11::doubles prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_binomial(SEXP n_samples, SEXP size, SEXP prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_binomial(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_cauchy(cpp11::doubles location, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_cauchy(SEXP location, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_cauchy(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(location), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_cauchy(size_t n_samples, cpp11::doubles location, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_cauchy(SEXP n_samples, SEXP location, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_cauchy(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(location), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_gamma_scale(cpp11::doubles shape, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_gamma_scale(SEXP shape, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_gamma_scale(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_gamma_scale(size_t n_samples, cpp11::doubles shape, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_gamma_scale(SEXP n_samples, SEXP shape, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_gamma_scale(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_gamma_rate(cpp11::doubles shape, cpp11::doubles rate, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_gamma_rate(SEXP shape, SEXP rate, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_gamma_rate(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rate), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_gamma_rate(size_t n_samples, cpp11::doubles shape, cpp11::doubles rate, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_gamma_rate(SEXP n_samples, SEXP shape, SEXP rate, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_gamma_rate(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rate), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_negative_binomial_prob(cpp11::doubles size, cpp11::doubles prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_negative_binomial_prob(SEXP size, SEXP prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_negative_binomial_prob(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_negative_binomial_prob(size_t n_samples, cpp11::doubles size, cpp11::doubles prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_negative_binomial_prob(SEXP n_samples, SEXP size, SEXP prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_negative_binomial_prob(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_negative_binomial_mu(cpp11::doubles size, cpp11::doubles mu, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_negative_binomial_mu(SEXP size, SEXP mu, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_negative_binomial_mu(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_negative_binomial_mu(size_t n_samples, cpp11::doubles size, cpp11::doubles mu, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_negative_binomial_mu(SEXP n_samples, SEXP size, SEXP mu, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_negative_binomial_mu(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_normal_box_muller(cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_normal_box_muller(SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_normal_box_muller(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_normal_polar(cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_normal_polar(SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_normal_polar(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_normal_ziggurat(cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_normal_ziggurat(SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_normal_ziggurat(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_normal_box_muller(size_t n_samples, cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_normal_box_muller(SEXP n_samples, SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_normal_box_muller(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_normal_polar(size_t n_samples, cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_normal_polar(SEXP n_samples, SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_normal_polar(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_normal_ziggurat(size_t n_samples, cpp11::doubles mean, cpp11::doubles sd, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_normal_ziggurat(SEXP n_samples, SEXP mean, SEXP sd, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_normal_ziggurat(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_uniform(cpp11::doubles min, cpp11::doubles max, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_uniform(SEXP min, SEXP max, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_uniform(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(max), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_uniform(size_t n_samples, cpp11::doubles min, cpp11::doubles max, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_uniform(SEXP n_samples, SEXP min, SEXP max, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_uniform(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(max), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_weibull(cpp11::doubles shape, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_weibull(SEXP shape, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_weibull(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_weibull(size_t n_samples, cpp11::doubles shape, cpp11::doubles scale, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_weibull(SEXP n_samples, SEXP shape, SEXP scale, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_weibull(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(shape), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(scale), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_log_normal(cpp11::doubles meanlog, cpp11::doubles sdlog, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_log_normal(SEXP meanlog, SEXP sdlog, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_log_normal(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(meanlog), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sdlog), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_log_normal(size_t n_samples, cpp11::doubles meanlog, cpp11::doubles sdlog, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_log_normal(SEXP n_samples, SEXP meanlog, SEXP sdlog, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_log_normal(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(meanlog), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sdlog), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_zi_poisson(cpp11::doubles lambda, cpp11::doubles pi, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_zi_poisson(SEXP lambda, SEXP pi, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_zi_poisson(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(pi), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_zi_poisson(size_t n_samples, cpp11::doubles lambda, cpp11::doubles pi, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_zi_poisson(SEXP n_samples, SEXP lambda, SEXP pi, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_zi_poisson(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(pi), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_beta_binomial_prob(cpp11::doubles size, cpp11::doubles prob, cpp11::doubles rho, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_beta_binomial_prob(SEXP size, SEXP prob, SEXP rho, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_beta_binomial_prob(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rho), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_beta_binomial_prob(size_t n_samples, cpp11::doubles size, cpp11::doubles prob, cpp11::doubles rho, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_beta_binomial_prob(SEXP n_samples, SEXP size, SEXP prob, SEXP rho, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_beta_binomial_prob(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rho), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_beta_binomial_ab(cpp11::doubles size, cpp11::doubles a, cpp11::doubles b, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_beta_binomial_ab(SEXP size, SEXP a, SEXP b, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_beta_binomial_ab(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(a), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(b), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_beta_binomial_ab(size_t n_samples, cpp11::doubles size, cpp11::doubles a, cpp11::doubles b, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_beta_binomial_ab(SEXP n_samples, SEXP size, SEXP a, SEXP b, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_beta_binomial_ab(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(a), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(b), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_hypergeometric(cpp11::doubles n1, cpp11::doubles n2, cpp11::doubles k, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_hypergeometric(SEXP n1, SEXP n2, SEXP k, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_hypergeometric(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(n1), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(n2), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(k), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_hypergeometric(size_t n_samples, cpp11::doubles n1, cpp11::doubles n2, cpp11::doubles k, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_hypergeometric(SEXP n_samples, SEXP n1, SEXP n2, SEXP k, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_hypergeometric(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(n1), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(n2), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(k), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_truncated_normal(cpp11::doubles mean, cpp11::doubles sd, cpp11::doubles min, cpp11::doubles max, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_truncated_normal(SEXP mean, SEXP sd, SEXP min, SEXP max, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_truncated_normal(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(max), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_truncated_normal(size_t n_samples, cpp11::doubles mean, cpp11::doubles sd, cpp11::doubles min, cpp11::doubles max, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_truncated_normal(SEXP n_samples, SEXP mean, SEXP sd, SEXP min, SEXP max, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_truncated_normal(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(max), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_multinomial(cpp11::doubles r_size, cpp11::doubles r_prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_multinomial(SEXP r_size, SEXP r_prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_multinomial(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// random.cpp
cpp11::doubles cpp_monty_random_n_multinomial(size_t n_samples, cpp11::doubles r_size, cpp11::doubles r_prob, cpp11::sexp ptr);
extern "C" SEXP _monty_cpp_monty_random_n_multinomial(SEXP n_samples, SEXP r_size, SEXP r_prob, SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_monty_random_n_multinomial(cpp11::as_cpp<cpp11::decay_t<size_t>>(n_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}
// test_rng.cpp
std::vector<std::string> test_xoshiro_run(cpp11::sexp ptr);
extern "C" SEXP _monty_test_xoshiro_run(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_xoshiro_run(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(ptr)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_monty_cpp_monty_random_beta",                     (DL_FUNC) &_monty_cpp_monty_random_beta,                     3},
    {"_monty_cpp_monty_random_beta_binomial_ab",         (DL_FUNC) &_monty_cpp_monty_random_beta_binomial_ab,         4},
    {"_monty_cpp_monty_random_beta_binomial_prob",       (DL_FUNC) &_monty_cpp_monty_random_beta_binomial_prob,       4},
    {"_monty_cpp_monty_random_binomial",                 (DL_FUNC) &_monty_cpp_monty_random_binomial,                 3},
    {"_monty_cpp_monty_random_cauchy",                   (DL_FUNC) &_monty_cpp_monty_random_cauchy,                   3},
    {"_monty_cpp_monty_random_exponential_mean",         (DL_FUNC) &_monty_cpp_monty_random_exponential_mean,         2},
    {"_monty_cpp_monty_random_exponential_rate",         (DL_FUNC) &_monty_cpp_monty_random_exponential_rate,         2},
    {"_monty_cpp_monty_random_gamma_rate",               (DL_FUNC) &_monty_cpp_monty_random_gamma_rate,               3},
    {"_monty_cpp_monty_random_gamma_scale",              (DL_FUNC) &_monty_cpp_monty_random_gamma_scale,              3},
    {"_monty_cpp_monty_random_hypergeometric",           (DL_FUNC) &_monty_cpp_monty_random_hypergeometric,           4},
    {"_monty_cpp_monty_random_log_normal",               (DL_FUNC) &_monty_cpp_monty_random_log_normal,               3},
    {"_monty_cpp_monty_random_multinomial",              (DL_FUNC) &_monty_cpp_monty_random_multinomial,              3},
    {"_monty_cpp_monty_random_n_beta",                   (DL_FUNC) &_monty_cpp_monty_random_n_beta,                   4},
    {"_monty_cpp_monty_random_n_beta_binomial_ab",       (DL_FUNC) &_monty_cpp_monty_random_n_beta_binomial_ab,       5},
    {"_monty_cpp_monty_random_n_beta_binomial_prob",     (DL_FUNC) &_monty_cpp_monty_random_n_beta_binomial_prob,     5},
    {"_monty_cpp_monty_random_n_binomial",               (DL_FUNC) &_monty_cpp_monty_random_n_binomial,               4},
    {"_monty_cpp_monty_random_n_cauchy",                 (DL_FUNC) &_monty_cpp_monty_random_n_cauchy,                 4},
    {"_monty_cpp_monty_random_n_exponential_mean",       (DL_FUNC) &_monty_cpp_monty_random_n_exponential_mean,       3},
    {"_monty_cpp_monty_random_n_exponential_rate",       (DL_FUNC) &_monty_cpp_monty_random_n_exponential_rate,       3},
    {"_monty_cpp_monty_random_n_gamma_rate",             (DL_FUNC) &_monty_cpp_monty_random_n_gamma_rate,             4},
    {"_monty_cpp_monty_random_n_gamma_scale",            (DL_FUNC) &_monty_cpp_monty_random_n_gamma_scale,            4},
    {"_monty_cpp_monty_random_n_hypergeometric",         (DL_FUNC) &_monty_cpp_monty_random_n_hypergeometric,         5},
    {"_monty_cpp_monty_random_n_log_normal",             (DL_FUNC) &_monty_cpp_monty_random_n_log_normal,             4},
    {"_monty_cpp_monty_random_n_multinomial",            (DL_FUNC) &_monty_cpp_monty_random_n_multinomial,            4},
    {"_monty_cpp_monty_random_n_negative_binomial_mu",   (DL_FUNC) &_monty_cpp_monty_random_n_negative_binomial_mu,   4},
    {"_monty_cpp_monty_random_n_negative_binomial_prob", (DL_FUNC) &_monty_cpp_monty_random_n_negative_binomial_prob, 4},
    {"_monty_cpp_monty_random_n_normal_box_muller",      (DL_FUNC) &_monty_cpp_monty_random_n_normal_box_muller,      4},
    {"_monty_cpp_monty_random_n_normal_polar",           (DL_FUNC) &_monty_cpp_monty_random_n_normal_polar,           4},
    {"_monty_cpp_monty_random_n_normal_ziggurat",        (DL_FUNC) &_monty_cpp_monty_random_n_normal_ziggurat,        4},
    {"_monty_cpp_monty_random_n_poisson",                (DL_FUNC) &_monty_cpp_monty_random_n_poisson,                3},
    {"_monty_cpp_monty_random_n_real",                   (DL_FUNC) &_monty_cpp_monty_random_n_real,                   2},
    {"_monty_cpp_monty_random_n_truncated_normal",       (DL_FUNC) &_monty_cpp_monty_random_n_truncated_normal,       6},
    {"_monty_cpp_monty_random_n_uniform",                (DL_FUNC) &_monty_cpp_monty_random_n_uniform,                4},
    {"_monty_cpp_monty_random_n_weibull",                (DL_FUNC) &_monty_cpp_monty_random_n_weibull,                4},
    {"_monty_cpp_monty_random_n_zi_poisson",             (DL_FUNC) &_monty_cpp_monty_random_n_zi_poisson,             4},
    {"_monty_cpp_monty_random_negative_binomial_mu",     (DL_FUNC) &_monty_cpp_monty_random_negative_binomial_mu,     3},
    {"_monty_cpp_monty_random_negative_binomial_prob",   (DL_FUNC) &_monty_cpp_monty_random_negative_binomial_prob,   3},
    {"_monty_cpp_monty_random_normal_box_muller",        (DL_FUNC) &_monty_cpp_monty_random_normal_box_muller,        3},
    {"_monty_cpp_monty_random_normal_polar",             (DL_FUNC) &_monty_cpp_monty_random_normal_polar,             3},
    {"_monty_cpp_monty_random_normal_ziggurat",          (DL_FUNC) &_monty_cpp_monty_random_normal_ziggurat,          3},
    {"_monty_cpp_monty_random_poisson",                  (DL_FUNC) &_monty_cpp_monty_random_poisson,                  2},
    {"_monty_cpp_monty_random_real",                     (DL_FUNC) &_monty_cpp_monty_random_real,                     1},
    {"_monty_cpp_monty_random_truncated_normal",         (DL_FUNC) &_monty_cpp_monty_random_truncated_normal,         5},
    {"_monty_cpp_monty_random_uniform",                  (DL_FUNC) &_monty_cpp_monty_random_uniform,                  3},
    {"_monty_cpp_monty_random_weibull",                  (DL_FUNC) &_monty_cpp_monty_random_weibull,                  3},
    {"_monty_cpp_monty_random_zi_poisson",               (DL_FUNC) &_monty_cpp_monty_random_zi_poisson,               3},
    {"_monty_cpp_monty_rng_jump",                        (DL_FUNC) &_monty_cpp_monty_rng_jump,                        2},
    {"_monty_cpp_monty_rng_long_jump",                   (DL_FUNC) &_monty_cpp_monty_rng_long_jump,                   2},
    {"_monty_cpp_monty_rng_set_state",                   (DL_FUNC) &_monty_cpp_monty_rng_set_state,                   2},
    {"_monty_cpp_monty_rng_state",                       (DL_FUNC) &_monty_cpp_monty_rng_state,                       1},
    {"_monty_monty_rng_alloc",                           (DL_FUNC) &_monty_monty_rng_alloc,                           3},
    {"_monty_test_xoshiro_run",                          (DL_FUNC) &_monty_test_xoshiro_run,                          1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_monty(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
